* 编码

#+BEGIN_SRC emacs-lisp
  ;; 显式声明 Emacs 优先使用 utf-8，这个在 Windows 上尤其重要
  (prefer-coding-system 'utf-8)
#+END_SRC

* 自定义函数
** 路径

#+BEGIN_SRC emacs-lisp
  ;;; Cygwin 风格路径的辅助函数

  (defun bw/is-cygpath (string)
    "是否 Cygwin 风格的路径。"
    (or (string-prefix-p "/cygdrive/" string)
        (string-prefix-p "-I/cygdrive" string)))

  (defun bw/cygpath-to-winpath (string)
    "将 Cygwin 风格的路径转为 Windows 风格的路径，比如
  /cygdrive/c/path 转为 c:/path。支持 -I。"
    (replace-regexp-in-string "\\(-I\\)?/cygdrive/\\([c-zC-Z]\\)\\(/.*\\)"
                              "\\1\\2:\\3" string))

  (defun bw/winpath-to-cygpath (string)
    "将 Windows 风格的路径转为 Cygwin 风格的路径，比如 c:/path 转为
  /cygdrive/c/path。支持 -I。"
    (replace-regexp-in-string "\\(-I\\)?\\([c-zC-Z]\\):\\(/.*\\)"
                              "\\1/cygdrive/\\2\\3" string))

  (defun bw/use-cygpath-in-list (args)
    "将 list 中的 Windows 风格的路径转为 Cygwin 风格的路径。"
    (mapcar (lambda (arg)
              (if (stringp arg)
                  (bw/winpath-to-cygpath arg)
                arg))
            args))

  (defun bw/use-winpath-in-list (args)
    "将 list 中的 Cygwin 风格的路径转为 Windows 风格的路径。"
    (mapcar (lambda (arg)
              (if (stringp arg)
                  (bw/cygpath-to-winpath arg)
                arg))
            args))


  ;;; MSYS 风格路径的辅助函数

  (defun bw/msyspath-to-winpath (string)
    "将 MSYS 风格的路径转为 Windows 风格的路径，比如 /c/path 转为
    c:/path。支持 -I。"
    (replace-regexp-in-string "\\(-I\\)?/\\([c-zC-Z]\\)\\(/.*\\)"
                              "\\1\\2:\\3" string))

  (defun bw/winpath-to-msyspath (string)
    "将 Windows 风格的路径转为 MSYS 风格的路径，比如 c:/path 转为
  /c/path。支持 -I。"
    (replace-regexp-in-string "\\(-I\\)?\\([c-zC-Z]\\):\\(/.*\\)"
                              "\\1/\\2\\3" string))

  (defun bw/winpath-to-msyspath-in-list (args)
    "将 list 中的 Windows 风格的路径转为 MSYS 风格的路径。"
    (mapcar (lambda (arg)
              (if (stringp arg)
                  (bw/winpath-to-msyspath arg)
                arg))
            args))

  (defun bw/msyspath-to-winpath-in-list (args)
    "将 list 中的 MSYS 风格的路径转为 Windows 风格的路径。"
    (mapcar (lambda (arg)
              (if (stringp arg)
                  (bw/msyspath-to-winpath arg)
                arg))
            args))
#+END_SRC

** 其他

#+BEGIN_SRC emacs-lisp
  (defun bw/get-ip-address ()
    "获取本机的 IP 地址。"
    (interactive)
    (let* (ip-address)
      (with-temp-buffer
        (let ((coding-system-for-read 'raw-text))
          (goto-char (point-min))
          (call-process "ipconfig" nil t nil "/all")
          (goto-char (point-min))
          (search-forward-regexp "IPv4 Address.*: \\([0-9.]+\\)")
          (setq ip-address
                (buffer-substring (match-beginning 1) (match-end 1)))))
      ip-address))

  (defun bw/rotate-windows ()
    "如果当前 Frame 只有两个 Window，旋转 Window。"
    (interactive)
    (if (= (count-windows) 2)
        (let* ((wl    (window-list))
               (w1    (frame-first-window))
               (w2    (if (equal w1 (car wl)) (cadr wl) (car wl)))
               (b1    (window-buffer w1))
               (b2    (window-buffer w2))
               (first (if (equal (current-buffer) b1) t nil)))
          (if (= (window-width) (frame-width))
              (split-window-horizontally)
            (split-window-vertically))
          (other-window 2)
          (delete-window)
          (switch-to-buffer b1)
          (other-window 1)
          (switch-to-buffer b2)
          (when first (other-window 1)))
      (message "There are not exactly 2 windows.")))

  (defun bw/swap-windows ()
    "如果当前 Frame 只有两个 Window，交换 Window。"
    (interactive)
    (cond ((/= (count-windows) 2)
           (message "You need exactly 2 windows to do this."))
          (t
           (let* ((w1 (first (window-list)))
                  (w2 (second (window-list)))
                  (b1 (window-buffer w1))
                  (b2 (window-buffer w2))
                  (s1 (window-start w1))
                  (s2 (window-start w2)))
             (set-window-buffer w1 b2)
             (set-window-buffer w2 b1)
             (set-window-start w1 s2)
             (set-window-start w2 s1))))
    (other-window 1))

  (defun bw/copy-buffer-name-to-clipboard ()
    "复制当前 Buffer 的名字到剪贴板。"
    (interactive)
    (kill-new (buffer-name))
    (message "Copied buffer name '%s' to the clipboard." (buffer-name)))

  (defun bw/copy-file-path-to-clipboard ()
    "复制当前 Buffer 的路径到剪贴板。"
    (interactive)
    (let ((file-path (or (buffer-file-name) list-buffers-directory)))
      (if file-path
          (progn
            (kill-new file-path)
            (message "Copied buffer file path '%s' to the clipboard." file-path))
        (error "Buffer is not visiting a file."))))

  (defun bw/ascii-table ()
    "打印 0-127 的 ASCII 表。"
    (interactive)
    (switch-to-buffer "*ASCII*")
    (erase-buffer)
    (setq buffer-read-only nil)
    (local-set-key "q" 'bury-buffer)
    (save-excursion (let ((i -1))
                      (insert "ASCII characters 0 thru 127.\n\n")
                      (insert "Hex OCT Dec Char | Hex OCT Dec Char | Hex OCT Dec Char | Hex OCT Dec Char\n")
                      (insert "-----------------+------------------+------------------+-----------------\n")
                      (while (< i 31)
                        (insert (format "%3x %3o %3d %4s | %3x %3o %3d %4s | %3x %3o %3d %4s | %3x %3o %3d %4s\n"
                                        (setq i (+ 1  i)) i i (single-key-description i)
                                        (setq i (+ 32 i)) i i (single-key-description i)
                                        (setq i (+ 32 i)) i i (single-key-description i)
                                        (setq i (+ 32 i)) i i (single-key-description i)))
                        (setq i (- i 96))))))

  (defun bw/log-to-message-buffer (name &rest args)
    "发送消息到 *Message* Buffer，而不显示在 minibuffer。"
    (setq inhibit-message t)
    (message "%s> %S" name args)
    (setq inhibit-message nil))
#+END_SRC

* 自定义常量
** 运行环境

  Emacs 内置了一些 display-*-p 函数可以用于判断运行环境，其中的
display-graphic-p 可以检测当前是否运行于图形界面，可以代替将变量
window-system 当作 boolean 的用法。

  下面自定义一些表示运行环境的常量，可以在后面的配置文件中使用。

#+BEGIN_SRC emacs-lisp
  (defconst bw/windows-p
      (eq system-type 'windows-nt)
    "是否运行在 MS Windows 环境")

  (defconst bw/cygwin-p
      (eq system-type 'cygwin)
    "是否运行在 Cygwin 环境")

  (defconst bw/linux-p
      (or (eq system-type 'gnu/linux)
          (eq system-type 'linux))
    "是否运行在 Linux 环境")

  (defconst bw/x-window-p
      (and window-system bw/linux-p)
    "是否运行在 Linux 的 X Window 环境")

  (defcustom bw/office-p nil
    "是否运行在公司的网络环境")

  (defcustom bw/home-p t
    "是否运行在家庭的网络环境")
#+END_SRC

* 个人设置

  ~/.emacs.d/personal/personal.el 里存一些定制的设置，如不同人使用偏好、
不同机器环境的差异等。下面是一些例子：
  - 补全框架使用 Helm 还是 Ivy
  - 当前是公司还是家庭网络环境

#+BEGIN_SRC emacs-lisp
  (defvar bw/completion-framework 'ivy
    "补全前端，可选 'helm、'ivy 和 nil")

  ;; 加载 ~/persional/personal.el，里面存私人设置，比如当前是公司还是家
  ;; 庭网络环境
  (let ((persional-file (locate-user-emacs-file "personal/personal.el")))
    (when (file-exists-p persional-file)
      (load-file persional-file)))

#+END_SRC
