* 自定义 Mode

#+BEGIN_SRC emacs-lisp
  ;; emacs-lisp-example-mode 用于 Emacs 配置 .org 文件，相应的代码不会用
  ;; 于初始化 Emacs
  (defalias 'emacs-lisp-example-mode 'emacs-lisp-mode)
#+END_SRC

* Auto Save

#+BEGIN_SRC emacs-lisp
  (setq auto-save-list-file-prefix
        (locate-user-emacs-file ".auto-save-list/.saves-"))
#+END_SRC

* Auto Backup

#+BEGIN_SRC emacs-lisp
  ;; Backup 策略
  (setq version-control t)     ; 启用文件备份方式的版本控制
  (setq kept-new-versions 5)   ; 备份最新的版本五次
  (setq delete-old-versions t) ; 删掉过时的的版本

  ;; 设置备份文件的路径
  (setq backup-directory-alist
        '(("" . "~/.emacs.d/.auto-backup/")))

  ;; 设置备份方法：直接拷贝
  (setq backup-by-copying t)
  (setq make-backup-files t)
#+END_SRC

* Custom 文件

  缺省情况下，Emacs 内置 Customization 的设置存在 init.el 文件。这里设
置存在单独的文件，并在 Emacs 启动过程中加载。

#+BEGIN_SRC emacs-lisp
  (setq custom-file (locate-user-emacs-file "personal/.custom.el"))
  (load custom-file 'noerror)
#+END_SRC

* Fill

#+BEGIN_SRC emacs-lisp
  ;; 缺省 fill 宽度是 70，改为 80
  (setq-default fill-column 80)
#+END_SRC

* Sentence

#+BEGIN_SRC emacs-lisp
  ;; Sentence 之间不需要两个空格
  (setq sentence-end-double-space nil)

  ;; 识别中文 Sentence
  (setq sentence-end "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")
#+END_SRC

* Easy PG

#+BEGIN_SRC emacs-lisp
  ;; 总是使用对称加密
  (setq epa-file-encrypt-to nil)

  ;; 允许缓存密码，否则编辑时每次保存都要输入密码
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)

  ;; 允许自动保存
  (setq epa-file-inhibit-auto-save nil)
#+END_SRC

* uniquify

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
#+END_SRC

* Save Place

  Save Place 是 Emacs 内置扩展，能够记录光标在文件中的位置，这样下次打
开文件时能够定位光标到关闭文件时的位置。

  需要注意的是，这会导致退出 Emacs 额外的耗时，设置不保存只读文件的位
置可以改善速度。如果还是太慢，可以把这个功能关掉。

#+BEGIN_SRC emacs-lisp
  (setq save-place-file (locate-user-emacs-file ".places"))

  ;; 不保存只读文件的位置
  (setq save-place-forget-unreadable-files nil)

  (if (version< emacs-version "25.1")
      (progn
        (require 'saveplace)
        (set-default save-place t))
    (save-place-mode 1))
#+END_SRC

* Recentf

  Recentf 记录近期打开的文件。如果需要在列表中排除或者保留指定的文件，
可以定制 recentf-exclude 和 recentf-keep。

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :ensure nil
    :init
    ;; 自定义数据文件
    (setq recentf-save-file (locate-user-emacs-file ".recentf"))
    :config
    ;; 记录最近 1000 个访问项，而不是缺省的 20 个
    (setq recentf-max-saved-items 1000)
    ;; 排除一些文件
    (add-to-list 'recentf-exclude "/tmp/"))
#+END_SRC

* Desktop

  Desktop 可以保存当前打开的文件列表，下次运行 Emacs 时自动打开这些文
件。

#+BEGIN_SRC emacs-lisp-example
  ;; 启用 desktop save mode
  (desktop-save-mode 1)
  ;; 设置 desktop 相关文件的路径
  (setq desktop-base-file-name (locate-user-emacs-file ".desktop"))
  (setq desktop-base-lock-name (locate-user-emacs-file ".desktop.lock"))
  ;; 始终保存 desktop 文件，不管文件原来是否存在，也不询问用户
  (setq desktop-save t)
  ;; 不管 desktop 文件是否被 lock，都加载 desktop 文件
  (setq desktop-load-locked-desktop t)
#+END_SRC

* midnight

  midnight 是 Emacs 自带的扩展，可以用一系列 clean-buffer-list- 变量，
根据 buffer 的名字设置或排除需要自动关闭的 buffer。缺省在半夜进行
buffer 的清理，也可以直接运行命令 clean-buffer-list 手动关闭设置的
buffer。

#+BEGIN_SRC emacs-lisp-example
  (require midnight)
  ;; 关闭超过 7 天没有使用的 buffer
  (setq clean-buffer-list-delay-general 7)
#+END_SRC

* Session

  Session 保存一些全局变量。

#+BEGIN_SRC emacs-lisp-example
  (setq session-save-file (locate-user-emacs-file ".session"))
  (setq session-save-file-coding-system 'utf-8-unix)
  ;; org-mark-ring 是一个循环结构。如果不除掉，使用 org-mode 后就关不了
  ;; emacs 了
  (add-to-list 'session-globals-exclude 'org-mark-ring)
  (add-hook 'after-init-hook 'session-initialize))
#+END_SRC

* Hippie Expand

  hippie-expand 的补全方式是一个优先列表，hippie-expand 会依次尝试列表
中的函数来补全，当前使用的匹配方式会在 echo 区域显示。
  - try-complete-file-name-partially
  - try-complete-file-name
  - try-expand-all-abbrevs
  - try-expand-list
  - try-expand-line
  - try-expand-dabbrev
  - try-expand-dabbrev-all-buffers
  - try-expand-dabbrev-from-kill
  - try-complete-lisp-symbol-partially
  - try-complete-lisp-symbol

#+BEGIN_SRC emacs-lisp
  (use-package hippie-exp
    :ensure nil
    :bind ("M-/" . hippie-expand)              ; 用 hippie-expand 代替 dabbrev-expand
    :init
    (setq hippie-expand-try-functions-list
          '(try-expand-dabbrev                 ; 当前 buffer 的单词
            try-expand-line                    ; 当前 buffer 的行
            try-expand-list                    ; 当前列表
            try-expand-list-all-buffers        ; 所有 buffer 的列表
            try-expand-dabbrev-visible         ; 可见窗口的单词
            try-expand-dabbrev-all-buffers     ; 所有 buffer 的单词
            try-expand-line-all-buffers        ; 所有 buffer 的行
            try-expand-dabbrev-from-kill       ; kill-ring 的单词
            try-complete-file-name             ; 文件名
            try-complete-file-name-partially   ; 部分文件名
            try-complete-lisp-symbol           ; lisp symbol
            try-complete-lisp-symbol-partially ; 部分 lisp symbol
            try-expand-whole-kill              ; kill-ring 的内容
            try-expand-all-abbrevs)))          ; abbrevs，需要预先定义
#+END_SRC

* Emacs Server

  Emacs 的 Server 模式可以通过 (server-mode 1) 或者 M-x server-start
启动。启动 Server 模式后，可以通过 emacsclient 打开文件，文件会在该
Emacs（Server）中打开文件，而不需要重新启动一个 Emacs。

  以启动的 Emacs Server 可以通过 M-x server-force-delete 停止。

  在 Emacs 启动过程中，可以通过 server-running-p 判断是否已经有 Server
在运行了。但这个函数不是 autoload，需要显式加载 server 包后再使用。

  值得注意的是，Emacs Server 启动后，缺省在 ~/.emacs.d/server 下生成一
个名为 server 的文件，emacsclient 就是通过这个文件找到正在运行的 Emacs
Server。如果修改了路径（server-auth-dir 的值），emacsclient 就找不到
Emacs Server 了，这时可以通过环境变量 EMACS_SERVER_FILE 或者
emacsclient 的 --server-file 参数，设置 server 文件的路径。

#+BEGIN_SRC emacs-lisp
  (use-package server
    :ensure nil
    :init
    (require 'server)
    (when (not (server-running-p))
      (server-start)))
#+END_SRC

* 键绑定
** 传统键绑定

#+BEGIN_SRC emacs-lisp
  ;; C-SPC 在中文操作系统用于切换输入法，C-@ 太难按
  ;; 这里使用两个缺省空闲的键绑定
  (global-set-key (kbd "C-`") 'set-mark-command)
  (global-set-key (kbd "C-;") 'set-mark-command)

  ;; 相应的修改 pop-global-mark，使用 C-x C-2
  (global-set-key (kbd "C-x C-2") 'pop-global-mark)

  ;; M-o 替换 C-x o，用于切换 window
  (global-set-key (kbd "M-o") 'other-window)

  (defun bw/beginning-of-line ()
    "If the point is not on beginning of current line, move point
    to beginning of current line, as 'beginning-of-line' does.  If
    the point already is on the beginning of current line, then move
    the point to the first non-space character, if it exists."
    (interactive)
    (if (not (eq (point) (line-beginning-position)))
        (beginning-of-line)
      (when (re-search-forward "\[^\[:blank:\]　\]" (line-end-position) t)
        (backward-char))))

  (global-set-key (kbd "C-a") 'bw/beginning-of-line)

  ;; DWIM (Do What I Mean) 版本的 M-w
  ;; 1. 如果有 region，则复制 region
  ;; 2. 如果没有 region，自动识别并复制网址和邮件地址，如果 2 者都没有找
  ;;    到的话，就把复制当前行
  ;; 3. M-w 之后，紧接着按以下键可以指定复制内容
  ;;    - w: word
  ;;    - l: list
  ;;    - s: sexp
  ;;    - f: file name
  ;; 4. 可以接受 prefix，比如
  ;;    - M-3 M-w     拷贝 3 行
  ;;    - M-3 M-w w   拷贝 3 个词

  (defun bw/kill-ring-save-dwim ()
    "This command dwim on saving text.

    If region is active, call `kill-ring-save'. Else, call
    `wb-kill-ring-save-thing-at-point'.

    This command is to be used interactively."
    (interactive)
    (if (use-region-p)
        (call-interactively 'kill-ring-save)
      (call-interactively 'bw/kill-ring-save-thing-at-point)))

  (defun bw/kill-ring-save-thing-at-point (&optional n)
    "Save THING at point to kill-ring."
    (interactive "p")
    (let ((things '((?l . list) (?f . filename) (?w . word) (?s . sexp)))
          (message-log-max)
          beg t-a-p thing event)
      (flet ((get-thing ()
                        (save-excursion
                          (beginning-of-thing thing)
                          (setq beg (point))
                          (if (= n 1)
                              (end-of-thing thing)
                            (forward-thing thing n))
                          (buffer-substring beg (point)))))
        ;; try detecting url email and fall back to 'line'
        (dolist (thing '(url email line))
          (when (bounds-of-thing-at-point thing)
            (setq t-a-p (get-thing))
            ;; remove the last newline character
            (if (not bw/kill-ring-save-dwim-include-last-newline)
                (when (and (eq thing 'line)
                           (>= (length t-a-p) 1)
                           (equal (substring t-a-p -1) "\n"))
                  (setq t-a-p (substring t-a-p 0 -1))))
            (kill-new t-a-p)
            (message "%s" t-a-p)
            (return nil)))
        (setq event (read-event nil))
        (when (setq thing (cdr (assoc event things)))
          (clear-this-command-keys t)
          (if (not (bounds-of-thing-at-point thing))
              (message "No %s at point" thing)
            (setq t-a-p (get-thing))
            (kill-new t-a-p 'replace)
            (message "%s" t-a-p))
          (setq last-input-event nil))
        (when last-input-event
          (clear-this-command-keys t)
          (setq unread-command-events (list last-input-event))))))

  ;; set the following var to t if you like a newline to the end of
  ;; copied text.
  (setq bw/kill-ring-save-dwim-include-last-newline nil)

  (global-set-key (kbd "M-w") 'bw/kill-ring-save-dwim)

  (defun bw/kill-region-dwim (&optional line)
    "This function is a enhancement of `kill-region', which is normal used to
    kill a region to kill-ring.  This function will do exactly as `kill-region'
    if there is a region selected when it is called. If there is no region, then
    do kill lines as `dd' in vim."
    (interactive "P")
    (unless (or line (and mark-active (not (equal (mark) (point)))))
      (setq line 1))
    (if line
        (let ((beg (line-beginning-position))
              (end (line-end-position)))
          (when (>= line 2)
            (setq end (line-end-position line)))
          (when (<= line -2)
            (setq beg (line-beginning-position (+ line 2))))
          (if (and bw/kill-region-dwim-include-last-newline
                   (not (= end (point-max))))
              (setq end (1+ end)))
          (kill-region beg end))
      (call-interactively 'kill-region)))
  ;; set the following var to t if you like a newline in the end of killed text.
  (setq bw/kill-region-dwim-include-last-newline t)

  (global-set-key (kbd "C-w") 'bw/kill-region-dwim)

  ;; 用 ibuffer 代替 list-buffers
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  ;; 用更通用的 M-S-return 切换全屏，把 F11 节省下来用于其他功能
  (global-set-key (kbd "<M-S-return>") 'toggle-frame-fullscreen)
#+END_SRC

** Space 键绑定

#+BEGIN_SRC emacs-lisp
  (defun bw/last-buffer (&optional window)
    "Switch back and forth between current and last buffer in the
  current window."
    (interactive)
    (let ((current-buffer (window-buffer window))
          (buffer-predicate
           (frame-parameter (window-frame window) 'buffer-predicate)))
      ;; switch to first buffer previously shown in this window that matches
      ;; frame-parameter `buffer-predicate'
      (switch-to-buffer
       (or (cl-find-if (lambda (buffer)
                         (and (not (eq buffer current-buffer))
                              (or (null buffer-predicate)
                                  (funcall buffer-predicate buffer))))
                       (mapcar #'car (window-prev-buffers window)))
           ;; `other-buffer' honors `buffer-predicate' so no need to filter
           (other-buffer current-buffer t)))))

  (defun bw/kill-this-buffer (&optional arg)
    "Kill the current buffer.
  If the universal prefix argument is used then kill also the window."
    (interactive "P")
    (if (window-minibuffer-p)
        (abort-recursive-edit)
      (if (equal '(4) arg)
          (kill-buffer-and-window)
        (kill-buffer))))

  (defun bw/dos2unix ()
    "Converts the current buffer to UNIX file format."
    (interactive)
    (set-buffer-file-coding-system 'undecided-unix nil))

  (defun bw/unix2dos ()
    "Converts the current buffer to DOS file format."
    (interactive)
    (set-buffer-file-coding-system 'undecided-dos nil))

  (which-key-add-key-based-replacements
    "<SPC> a"  "applications"
    "<SPC> b"  "buffers"
    "<SPC> f"  "files"
    "<SPC> fC" "convert"
    "<SPC> h"  "help"
    "<SPC> r"  "registers"
    "<SPC> s"  "search"
    "<SPC> w"  "windows")

  (bw/set-space-key-and-name
   "TAB" 'bw/last-buffer            "last buffer"
   "bd"  'bw/kill-this-buffer       "kill this buffer"
   "fCd" 'bw/unix2dos               "unix2dos"
   "fCu" 'bw/dos2unix               "dos2unix"
   "hb"  'describe-bindings         "bindings"
   "hc"  'describe-char             "char"
   "hF"  'describe-face             "face"
   "hf"  'describe-function         "function"
   "hk"  'describe-key              "key"
   "hv"  'describe-variable         "variable"
   "hm"  'describe-mode             "mode"
   "wd"  'delete-window             "delete"
   "wh"  'split-window-horizontally "split |"
   "wk"  'delete-other-windows      "keep"
   "wv"  'split-window-vertically   "split -")
#+END_SRC

* 其他

#+BEGIN_SRC emacs-lisp
  ;; 把 yes/no 提示换为 y/n
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; 当光标在括号上时，用实心框光标显示匹配括号
  (show-paren-mode 1)

  ;; 用空格代替 Tab
  (setq-default indent-tabs-mode nil)

  ;; Tab 缺省宽度是 4 个空格
  (setq-default tab-width 4)

  ;; 在文档最后自动插入一个空行
  ;; 可以用 mode-require-final-newline 针对 mode 设置
  (setq require-final-newline 't)

  ;; 即使在中文操作系统，mode-line 和 dired 等模式下星期、月份等信息不用中文
  (setq system-time-locale "C")

  ;; 以 24 小时格式显示时间
  (setq display-time-24hr-format t)

  ;; 在 kill ring 中保留其他程序复制的内容
  (setq save-interprogram-paste-before-kill t)

  ;; apropos 命令搜索更多内容，当然这会花费更多时间
  (setq apropos-do-all t)

  ;; 用鼠标粘贴内容
  (setq mouse-yank-at-point t)

  ;; 使用闪屏而不是声音提示错误操作
  (setq visible-bell t)

  ;; 在 elc、el、dll 中加载最新的，而不是第一个找到的
  (setq load-prefer-newer t)

  ;; 在一个 Frame 中显示 Ediff 界面
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  ;; 提示文件末尾的空白行
  (setq-default indicate-empty-lines t)

  ;; 在编程的模式提示行尾的空格
  (add-hook 'prog-mode-hook (lambda ()
                              (setq show-trailing-whitespace 1)))

  (setq savehist-file (locate-user-emacs-file ".history"))

  (setq bookmark-default-file "~/.emacs.d/.bookmarks") ; 自定义 bookmark 文件的位置

  ;; 在文本选择的状态，输入时直接替换被选择文本
  (delete-selection-mode 1)

  ;; 鼠标选择文本时自动复制
  (setq mouse-drag-copy-region t)
#+END_SRC
