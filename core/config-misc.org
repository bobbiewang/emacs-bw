* 自定义 Mode

#+BEGIN_SRC emacs-lisp
  ;; emacs-lisp-example-mode 用于 Emacs 配置 .org 文件，相应的代码不会用
  ;; 于初始化 Emacs
  (defalias 'emacs-lisp-example-mode 'emacs-lisp-mode)
#+END_SRC

* Auto Save

#+BEGIN_SRC emacs-lisp
  (setq auto-save-list-file-prefix
        (locate-user-emacs-file ".auto-save-list/.saves-"))
#+END_SRC

* Auto Backup

#+BEGIN_SRC emacs-lisp
  ;; Backup 策略
  (setq version-control t)     ; 启用文件备份方式的版本控制
  (setq kept-new-versions 5)   ; 备份最新的版本五次
  (setq delete-old-versions t) ; 删掉过时的的版本

  ;; 设置备份文件的路径
  (setq backup-directory-alist
        '(("" . "~/.emacs.d/.auto-backup/")))

  ;; 设置备份方法：直接拷贝
  (setq backup-by-copying t)
  (setq make-backup-files t)
#+END_SRC

* Custom 文件

#+BEGIN_SRC emacs-lisp
  (setq custom-file (locate-user-emacs-file "personal/.custom.el"))
#+END_SRC

* Easy PG

#+BEGIN_SRC emacs-lisp
  ;; 总是使用对称加密
  (setq epa-file-encrypt-to nil)

  ;; 允许缓存密码，否则编辑时每次保存都要输入密码
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)

  ;; 允许自动保存
  (setq epa-file-inhibit-auto-save nil)
#+END_SRC

* uniquify

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
#+END_SRC

* Save Place

  Save Place 是 Emacs 内置扩展，能够记录光标在文件中的位置，这样下次打
开文件时能够定位光标到关闭文件时的位置。

  需要注意的是，这会导致退出 Emacs 额外的耗时，设置不保存只读文件的位
置可以改善速度。如果还是太慢，可以把这个功能关掉。

#+BEGIN_SRC emacs-lisp
  (setq save-place-file (locate-user-emacs-file ".places"))

  ;; 不保存只读文件的位置
  (setq save-place-forget-unreadable-files nil)

  (if (version< emacs-version "25.1")
      (progn
        (require 'saveplace)
        (set-default save-place t))
    (save-place-mode 1))
#+END_SRC

* 键绑定
** 传统键绑定

#+BEGIN_SRC emacs-lisp
  ;; 用 C-2 设置 mark，和 C-@ 键位相同，但不用按 Shift
  (global-set-key [?\C-2] 'set-mark-command)

  ;; 相应的修改 pop-global-mark，使用 C-x C-2
  (global-set-key (kbd "C-x C-2") 'pop-global-mark)

  ;; M-o 替换 C-x o，用于切换 window
  (global-set-key (kbd "M-o") 'other-window)

  (defun bw/beginning-of-line ()
    "If the point is not on beginning of current line, move point
    to beginning of current line, as 'beginning-of-line' does.  If
    the point already is on the beginning of current line, then move
    the point to the first non-space character, if it exists."
    (interactive)
    (if (not (eq (point) (line-beginning-position)))
        (beginning-of-line)
      (when (re-search-forward "\[^\[:blank:\]　\]" (line-end-position) t)
        (backward-char))))

  (global-set-key [?\C-a] 'bw/beginning-of-line)

  ;; 用 hippie-expand 代替 dabbrev-expand
  (global-set-key (kbd "M-/") 'hippie-expand)

  ;; 用 ibuffer 代替 list-buffers
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  ;; 对换正则表达式和字符串 isearch
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)

  ;; 在 isearch 过程中，用 C-o 显示当前查找内容的 occur 结果
  (define-key isearch-mode-map (kbd "C-o")
    (lambda ()
      (interactive)
      (let ((case-fold-search isearch-case-fold-search))
        (occur (if isearch-regexp isearch-string
                 (regexp-quote isearch-string))))))

#+END_SRC

** Space 键绑定

#+BEGIN_SRC emacs-lisp
  (defun bw/last-buffer (&optional window)
    "Switch back and forth between current and last buffer in the
  current window."
    (interactive)
    (let ((current-buffer (window-buffer window))
          (buffer-predicate
           (frame-parameter (window-frame window) 'buffer-predicate)))
      ;; switch to first buffer previously shown in this window that matches
      ;; frame-parameter `buffer-predicate'
      (switch-to-buffer
       (or (cl-find-if (lambda (buffer)
                         (and (not (eq buffer current-buffer))
                              (or (null buffer-predicate)
                                  (funcall buffer-predicate buffer))))
                       (mapcar #'car (window-prev-buffers window)))
           ;; `other-buffer' honors `buffer-predicate' so no need to filter
           (other-buffer current-buffer t)))))

  (defun bw/kill-this-buffer (&optional arg)
    "Kill the current buffer.
  If the universal prefix argument is used then kill also the window."
    (interactive "P")
    (if (window-minibuffer-p)
        (abort-recursive-edit)
      (if (equal '(4) arg)
          (kill-buffer-and-window)
        (kill-buffer))))

  (defun bw/dos2unix ()
    "Converts the current buffer to UNIX file format."
    (interactive)
    (set-buffer-file-coding-system 'undecided-unix nil))

  (defun bw/unix2dos ()
    "Converts the current buffer to DOS file format."
    (interactive)
    (set-buffer-file-coding-system 'undecided-dos nil))

  (which-key-add-key-based-replacements
    "<SPC> a"  "applications"
    "<SPC> b"  "buffers"
    "<SPC> f"  "files"
    "<SPC> fC" "convert"
    "<SPC> h"  "help"
    "<SPC> r"  "registers"
    "<SPC> s"  "search"
    "<SPC> w"  "windows")

  (bw/set-space-key-and-name
   "TAB" 'bw/last-buffer            "last buffer"
   "bd"  'bw/kill-this-buffer       "kill this buffer"
   "fCd" 'bw/unix2dos               "unix2dos"
   "fCu" 'bw/dos2unix               "dos2unix"
   "hb"  'describe-bindings         "bindings"
   "hc"  'describe-char             "char"
   "hF"  'describe-face             "face"
   "hf"  'describe-function         "function"
   "hk"  'describe-key              "key"
   "hm"  'describe-mode             "mode"
   "wd"  'delete-window             "delete"
   "wh"  'split-window-horizontally "split |"
   "wk"  'delete-other-windows      "keep"
   "wv"  'split-window-vertically   "split -")
#+END_SRC

* 其他

#+BEGIN_SRC emacs-lisp
  ;; 当光标在括号上时，用实心框光标显示匹配括号
  (show-paren-mode 1)

  ;; 用空格代替 Tab
  (setq-default indent-tabs-mode nil)

  ;; 即使在中文操作系统，mode-line 和 dired 等模式下星期、月份等信息不用中文
  (setq system-time-locale "C")

  ;; 以 24 小时格式显示时间
  (setq display-time-24hr-format t)

  ;; 在 kill ring 中保留其他程序复制的内容
  (setq save-interprogram-paste-before-kill t)

  ;; apropos 命令搜索更多内容，当然这会花费更多时间
  (setq apropos-do-all t)

  ;; 用鼠标粘贴内容
  (setq mouse-yank-at-point t)

  ;; 使用闪屏而不是声音提示错误操作
  (setq visible-bell t)

  ;; 在 elc、el、dll 中加载最新的，而不是第一个找到的
  (setq load-prefer-newer t)

  ;; 在一个 Frame 中显示 Ediff 界面
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  (setq savehist-file (locate-user-emacs-file ".history"))
  (setq recentf-save-file (locate-user-emacs-file ".recentf"))
  (setq server-auth-dir (locate-user-emacs-file ".server/"))
  (setq bookmark-default-file "~/.emacs.d/.bookmarks") ; 自定义 bookmark 文件的位置
#+END_SRC
