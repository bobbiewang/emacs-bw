#+TITLE:     User Interface

* 配置变量

#+BEGIN_SRC emacs-lisp
  (defvar bw/ui-style 'emacs
    "User Interface 的风格，可选 'emacs、'evil。")
#+END_SRC

* 显示
** 字体

  Emacs 23 开始底层统一用 Unicode 实现，中英文混合字体的设置比较简单了。下面的设
置使用了 Consolas 和微软雅黑组合，下列字体大小设置可以做到中英文等宽。

  | Consolas | 微软雅黑 |
  |----------+----------|
  |       14 |       16 |
  |       16 |       18 |
  |       18 |       20 |

  如果需要更强大的字体设置功能，可以考虑使用 [[https://github.com/tumashu/cnfonts][cnfonts]] 包。

#+BEGIN_SRC emacs-lisp
  (defun bw/set-mono-font ()
    (interactive)
    (when (display-graphic-p)
      (set-face-attribute 'default nil :font "Consolas:pixelsize=16")
      (dolist (charset '(kana han symbol cjk-misc bopomofo))
        (set-fontset-font (frame-parameter nil 'font)
                          charset (font-spec :family "Microsoft Yahei"
                                             :size 18)))))

  ;; 在图形界面中设置字体
  (bw/set-mono-font)
  ;; 基于 Emacs Daemon 新建 Frame 时设置字体
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (select-frame frame)
              (bw/set-mono-font)))
#+END_SRC

** 主题

  [[https://github.com/oneKelvinSmith/monokai-emacs][monokai-theme]] 源自 TextMate 的 Monokai Theme，是一个比较舒服的暗色主
题。

#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :ensure t
    :config
    ;; Emacs 根据 frame-background-mode 确定 Frame 背景的亮暗，可选值未 dark、
    ;; light、nil（自动判断）。自动判断的结果可以通过 (frame-parameter nil
    ;; 'background-mode) 得到。如果缺省的自动判断出错，会造成颜色显示问题，可以显
    ;; 式设置
    (setq frame-background-mode 'dark)
    (load-theme 'monokai t))
#+END_SRC

** Frame
*** 标题

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '("Emacs BW"))
#+END_SRC

*** 界面

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  ;; 在 modeline 显示列号
  (column-number-mode 1)

  ;; 在 modeline 显示时间
  (display-time)
#+END_SRC

** 最大化

  在 MS Windows 系统启动后最大化。

#+BEGIN_SRC emacs-lisp
  (when bw/windows-p
    (set-frame-parameter nil 'fullscreen 'maximized))
#+END_SRC

* 交互
** which-key

  [[https://github.com/justbur/emacs-which-key][which-key]] 可以显示连续键中后续可选的键，不仅酷炫，而且方便使用不是很
常用的键绑定

  which-key 缺省显示键对应的命令或者 prefix（还有后续按键），可以自定
义显示的内容。下面是两个例子。

#+BEGIN_SRC emacs-lisp-example
  ;; 全局设置
  (which-key-add-key-based-replacements
    "C-x C-f" "find files")

  ;; 针对某 Major Mode 设置
  (which-key-add-major-mode-key-based-replacements 'org-mode
    "C-c C-c" "Org C-c C-c"
    "C-c C-a" "Org Attach")
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :delight
    :init
    (setq which-key-idle-delay 0.4)
    :config
    (which-key-mode))
#+END_SRC

** File Name Cache

  File Name Cache 是一个方便的快速打开常用文件的扩展。缺省情况下，在使
用 C-x C-f 的时候，键入 C-TAB 就会显示 File Name Cache 列表。不过，在
终端中使用 Emacs 的时候不能键入 C-TAB，不太方便，可以结合 ido、heml 等
补全框架使用。

#+BEGIN_SRC emacs-lisp
  (use-package filecache
    :commands bw/file-cache-list
    :config
    (file-cache-add-file-list (list "~/.emacs.d/init.el"))
    (file-cache-add-directory "~/.emacs.d/core/" "config-.*.org")
    (file-cache-add-directory "~/.emacs.d/modules/" "config-.*.org")

    (defun bw/file-cache-list ()
      (mapcar (lambda (x)
                (concat (nth 1 x) (nth 0 x)))
              file-cache-alist)))
#+END_SRC

** key-chord and key-seq

#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :if (eq bw/ui-style 'emacs)
    :ensure t)

  (use-package key-seq
    :if (eq bw/ui-style 'emacs)
    :ensure t)
#+END_SRC

** General

  [[https://github.com/noctuid/general.el][General]] 支持定义多个 Leader Key。general-define-key 函数用于设置键绑定，设置的
键绑定可以通过M-x general-describe-keybindings 列出。
  - Evil UI：使用 Space 作为 Leader Key。
  - Emacs UI：使用 Ctrl-, 和 ,, 作为 Leader Key。后者可以在不支持 Ctrl-, 的环境
    下（如某些 Term）使用。

#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t
    :init
    (if (eq bw/ui-style 'emacs)
        (progn
          (require 'key-chord)
          (require 'key-seq)
          (key-chord-mode 1)
          ;; 顺序键的 keymap
          (setq two-key-keymap (make-sparse-keymap))
          (key-seq-define-global ",," two-key-keymap)
          ;; 组合键的 keymap
          (setq comb-key-keymap (make-sparse-keymap))
          (keymap-set global-map "M-i" comb-key-keymap)))
    (defun bw/define-keys-and-names (key def name &rest bindings)
        "设置 Leader Key 引导的键绑定和显示的名字。"
        (while key
          (if (eq bw/ui-style 'emacs)
              ; 设置 Emacs UI 键绑定
              (progn
                (when def
                    (general-define-key :keymaps 'two-key-keymap key def)
                    (general-define-key :keymaps 'comb-key-keymap key def))
                (when name
                    (which-key-add-keymap-based-replacements
                      two-key-keymap (format "%s" key) name)
                    (which-key-add-keymap-based-replacements
                        comb-key-keymap (format "%s" key) name)))
            ; 设置 Evil UI 键绑定
            (if def
                (general-define-key :prefix "SPC" :keymaps 'normal key def))
            (if name
                (which-key-add-key-based-replacements
                  (format "<SPC> %s" key) name)))
          ; 循环获取下一组 key, def, name
          (setq key  (pop bindings)
                def  (pop bindings)
                name (pop bindings)))))
#+END_SRC

** Evil

  [[https://github.com/emacs-evil/evil/][Evil]] 在 Emacs 中提供了对 vi 的模拟。

  vi 中有各种模式，在 Evil 中成为 State。Evil 内置支持 7 种 State，每
种 State 都有各自的 kemap 和设置选项。
  - Normal (N) :: 用于浏览和编辑
  - Insert (I) :: 用于输入文本
  - Visual (V) :: 按 v 进入
  - Replace (R)
  - Operator-Pending (O) :: 一些操作符（如 c、d 等）后面需要跟动作命令
       （如 w、$），这是等待动作的状态
  - Motion (M) :: 用于 Read-only Buffer，比如 Help
  - Emacs (E) :: 保留 Emacs 键绑定，除了 C-z 用于进入 Normal State

  Emacs 中的 Mode 会有一个缺省的 State，这可以通过 evil-*-state-modes
变量设置。下面的例子中把所有缺省为 Emacs State 的 Modes 改为 Motion
State。

#+BEGIN_SRC emacs-lisp-example
  (setq evil-motion-state-modes (append evil-emacs-state-modes evil-motion-state-modes))
  (setq evil-emacs-state-modes nil)
#+END_SRC

  缺省情况下，不同的 State 仅靠 Tag（N、I 等）区别，可以通过设置
Cursor、Tag、mode-line、hl-line 等可视内容提供更醒目的信息

  Evil 的 Insert State 不能使用 Emacs 键绑定，对于传统 Emacs 用户不方
便，可以改为 Emacs State 的键绑定，但同时要保留 ESC 键切换到 Normal
State 的功能。下面的代码可以达到这个目的。

#+BEGIN_SRC emacs-lisp-example
  ;; 方法 1
  (setq evil-insert-state-map (make-sparse-keymap))
  ;; 在 Insert State 中通过 ESC 切换到 Normal State
  (define-key evil-insert-state-map (kbd "<escape>") 'evil-normal-state)

  ;; 方法 2
  ;; 将 Insert State 所有键绑定清除
  (setcdr evil-insert-state-map nil)
  ;; 在 Insert State 中使用 Emacs State 的键绑定
  (define-key evil-insert-state-map
    (read-kbd-macro evil-toggle-key) 'evil-emacs-state)
  ;; 在 Insert State 中通过 ESC 切换到 Normal State
  (define-key evil-insert-state-map [escape] 'evil-normal-state)
#+END_SRC

  Evil Normal State 缺省绑定了以下单独按键的功能，没有自定义功能的单键只有：Q、U。

  | <escape> | evil-force-normal-state            |
  | SPC      | evil-forward-char                  |
  | !        | evil-shell-command                 |
  | "        | evil-use-register                  |
  | #        | evil-search-word-backward          |
  | $        | evil-end-of-line                   |
  | %        | evil-jump-item                     |
  | &        | evil-ex-repeat-substitute          |
  | '        | evil-goto-mark-line                |
  | (        | evil-backward-sentence-begin       |
  | )        | evil-forward-sentence-begin        |
  | *        | evil-search-word-forward           |
  | +        | evil-next-line-first-non-blank     |
  | ,        | evil-repeat-find-char-reverse      |
  | -        | evil-previous-line-first-non-blank |
  | .        | evil-repeat                        |
  | /        | evil-search-forward                |
  | :        | evil-ex                            |
  | ;        | evil-repeat-find-char              |
  | <        | evil-shift-left                    |
  | =        | evil-indent                        |
  | >        | evil-shift-right                   |
  | ?        | evil-search-backward               |
  | @        | evil-execute-macro                 |
  | [        | <Prefix Command>                   |
  | \        | evil-execute-in-emacs-state        |
  | ]        | <Prefix Command>                   |
  | ^        | evil-first-non-blank               |
  | _        | evil-next-line-1-first-non-blank   |
  | `        | evil-goto-mark                     |
  | {        | evil-backward-paragraph            |
  | \vert    | evil-goto-column                   |
  | }        | evil-forward-paragraph             |
  | ~        | evil-invert-char                   |
  |----------+------------------------------------|
  | A        | evil-append-line                   |
  | B        | evil-backward-WORD-begin           |
  | C        | evil-change-line                   |
  | D        | evil-delete-line                   |
  | E        | evil-forward-WORD-end              |
  | F        | evil-find-char-backward            |
  | G        | evil-goto-line                     |
  | H        | evil-winow-top                     |
  | I        | evil-insert-line                   |
  | J        | evil-join                          |
  | K        | evil-lookup                        |
  | L        | evil-window-bottom                 |
  | M        | evil-window-middle                 |
  | N        | evil-search-previous               |
  | O        | evil-open-above                    |
  | P        | evil-paste-before                  |
  | R        | evil-replace-state                 |
  | S        | evil-change-whole-line             |
  | T        | evil-find-char-to-backward         |
  | V        | evil-visual-line                   |
  | W        | evil-forward-WORD-begin            |
  | X        | evil-delete-backward-char          |
  | Y        | evil-yank-line                     |
  | Z        | <Prefix Command>                   |
  |----------+------------------------------------|
  | a        | evil-append                        |
  | b        | evil-backward-word-begin           |
  | c        | evil-change                        |
  | d        | evil-delete                        |
  | e        | evil-forward-word-begin            |
  | f        | evil-find-char                     |
  | g        | <Prefix Command>                   |
  | h        | evil-backward-char                 |
  | i        | evil-insert                        |
  | j        | evil-next-line                     |
  | k        | evil-previous-line                 |
  | l        | evil-forward-char                  |
  | m        | evil-set-marker                    |
  | n        | evil-search-next                   |
  | o        | evil-open-below                    |
  | p        | evil-paste-after                   |
  | q        | evil-record-macro                  |
  | r        | evil-replace                       |
  | s        | evil-substitute                    |
  | t        | evil-find-char-to                  |
  | u        | undo                               |
  | v        | evil-visual-char                   |
  | w        | evil-forward-word-begin            |
  | x        | evil-delete-char                   |
  | y        | evil-yank                          |
  | z        | <Prefix Command>                   |
  |----------+------------------------------------|
  | [ (      | evil-previous-open-paren           |
  | [ [      | evil-backward-section-begin        |
  | [ ]      | evil-backward-section-end          |
  | [ s      | evil-prev-flyspell-error           |
  |----------+------------------------------------|
  | [ {      | evil-previous-open-brace           |
  | ] )      | evil-next-close-paren              |
  | ] [      | evil-forward-section-end           |
  | ] ]      | evil-forward-section-begin         |
  | ] s      | evil-next-flyspell-error           |
  | ] }      | evil-next-close-brace              |
  |----------+------------------------------------|
  | Z        | Prefix Command                     |
  | Z Q      | evil-quit                          |
  | Z Z      | evil-save-modified-and-close       |
  |----------+------------------------------------|
  | z        | Prefix Command                     |
  | z =      | ispell-word                        |
  | z O      | evil-open-fold-rec                 |
  | z a      | evil-toggle-fold                   |
  | z c      | evil-close-fold                    |
  | z m      | evil-close-folds                   |
  | z o      | evil-open-fold                     |
  | z r      | evil-open-folds                    |
  |----------+------------------------------------|
  | g        | Prefix Command                     |
  | g &      | evil-ex-repeat-global-substitute   |
  | g ,      | goto-last-change-reverse           |
  | g 8      | what-cursor-position               |
  | g ;      | goto-last-change                   |
  | g ?      | evil-rot13                         |
  | g F      | evil-find-file-at-point-with-line  |
  | g J      | evil-join-whitespace               |
  | g U      | evil-upcase                        |
  | g a      | what-cursor-position               |
  | g f      | find-file-at-point                 |
  | g i      | evil-insert-resume                 |
  | g q      | evil-fill-and-move                 |
  | g u      | evil-downcase                      |
  | g w      | evil-fill                          |
  | g ~      | evil-invert-case                   |

  Evil Normal State 缺省绑定了以下键绑定的功能。

  | C-n       | evil-paste-pop-next                |
  | C-p       | evil-paste-pop                     |
  | C-r       | redo                               |
  | C-t       | pop-tag-mark                       |
  | C-.       | evil-repeat-pop                    |
  | M-.       | evil-repeat-pop-next               |
  | C-b       | evil-scroll-page-up                |
  | C-d       | evil-scroll-down                   |
  | C-e       | evil-scroll-line-down              |
  | C-f       | evil-scroll-page-down              |
  | C-o       | evil-jump-backward                 |
  | C-v       | evil-visual-block                  |
  | C-w       | evil-window-map                    |
  | C-y       | evil-scroll-line-up                |
  | C-z       | evil-emacs-state                   |
  | C-]       | evil-jump-to-tag                   |
  | C-^       | evil-buffer                        |
  | C-6       | evil-switch-to-windows-last-buffer |
  |-----------+------------------------------------|
  | C-w C-b   | evil-window-bottom-right           |
  | C-w C-c   | evil-window-delete                 |
  | C-w C-f   | ffap-other-window                  |
  | C-w C-n   | evil-window-new                    |
  | C-w C-o   | delete-other-windows               |
  | C-w C-p   | evil-window-mru                    |
  | C-w C-r   | evil-window-rotate-downwards       |
  | C-w C-s   | evil-window-split                  |
  | C-w C-t   | evil-window-top-left               |
  | C-w C-v   | evil-window-vsplit                 |
  | C-w C-w   | evil-window-next                   |
  | C-w C-_   | evil-window-set-height             |
  | C-w +     | evil-window-increase-height        |
  | C-w -     | evil-window-decrease-height        |
  | C-w <     | evil-window-decrease-width         |
  | C-w =     | balance-windows                    |
  | C-w >     | evil-window-increase-width         |
  | C-w H     | evil-window-move-far-left          |
  | C-w J     | evil-window-move-very-bottom       |
  | C-w K     | evil-window-move-very-top          |
  | C-w L     | evil-window-move-far-right         |
  | C-w R     | evil-window-rotate-upwards         |
  | C-w S     | evil-window-split                  |
  | C-w W     | evil-window-prev                   |
  | C-w _     | evil-window-set-height             |
  | C-w b     | evil-window-bottom-right           |
  | C-w c     | evil-window-delete                 |
  | C-w h     | evil-window-left                   |
  | C-w j     | evil-window-down                   |
  | C-w k     | evil-window-up                     |
  | C-w l     | evil-window-right                  |
  | C-w n     | evil-window-new                    |
  | C-w o     | delete-other-windows               |
  | C-w p     | evil-window-mru                    |
  | C-w q     | evil-quit                          |
  | C-w r     | evil-window-rotate-downwards       |
  | C-w s     | evil-window-split                  |
  | C-w t     | evil-window-top-left               |
  | C-w v     | evil-window-vsplit                 |
  | C-w w     | evil-window-next                   |
  | C-w \vert | evil-window-set-width              |
  | C-w C-S-h | evil-window-move-far-left          |
  | C-w C-S-j | evil-window-move-very-bottom       |
  | C-w C-S-k | evil-window-move-very-top          |
  | C-w C-S-l | evil-window-move-far-right         |
  | C-w C-S-r | evil-window-rotate-upwards         |
  | C-w C-S-s | evil-window-split                  |
  | C-w C-S-w | evil-window-prev                   |

  参考资料
  - [[https://raw.githubusercontent.com/emacs-evil/evil/master/doc/evil.pdf][Evil Manual (PDF)]]
  - [[https://github.com/noctuid/evil-guide][noctuid/evil-guide]]
  - [[http://dnquark.com/blog/2012/02/emacs-evil-ecumenicalism/][Emacs + Evil = ecumenicalism]] Evil 缺省适合 Vim 用户，Emacs 用户需
    要进行一些设置
  - [[https://stackoverflow.com/questions/25542097/emacs-evil-mode-how-to-change-insert-state-to-emacs-state-automatically][Emacs evil-mode how to change insert-state to emacs-state automatically]]

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :if (eq bw/ui-style 'evil)
    :ensure t
    :demand
    :hook ((xref--xref-buffer-mode-hook) . evil-emacs-state)
    :config
    (evil-mode 1)
    ;; 缺省从 Insert State 切换到 Normal State，光标会前移一格，改为不移动
    (setq evil-move-cursor-back nil)
    ;; 让 Evil 的 State 醒目
    (setq evil-normal-state-cursor '(box "green")
          evil-insert-state-cursor '(bar "red"))
    (setq evil-normal-state-tag (propertize "[N]" 'face
                                            '((:background "green" :foreground "black")))
          evil-insert-state-tag (propertize "[I]" 'face
                                            '((:background "red") :foreground "white"))
          evil-visual-state-tag (propertize "[V]" 'face
                                            '((:background "grey80" :foreground "black")))
          evil-operator-state-tag (propertize "[O]" 'face
                                              '((:background "purple")))
          evil-motion-state-tag (propertize "[M]" 'face
                                            '((:background "blue") :foreground "white"))
          evil-emacs-state-tag (propertize "[E]" 'face
                                           '((:background "orange" :foreground "black"))))
    ;; (add-hook 'evil-normal-state-entry-hook (lambda ()
    ;;                                           (set-face-background 'hl-line "#006400")))
    ;; (add-hook 'evil-insert-state-entry-hook (lambda ()
    ;;                                           (set-face-background 'hl-line "#49483E")))
    ;; (add-hook 'evil-visual-state-entry-hook (lambda ()
    ;;                                           (set-face-background 'hl-line "#49483E")))
    ;; (add-hook 'evil-replace-state-entry-hook (lambda ()
    ;;                                            (set-face-background 'hl-line "#49483E")))
    ;; (add-hook 'evil-operator-state-entry-hook (lambda ()
    ;;                                             (set-face-background 'hl-line "#49483E")))
    ;; (add-hook 'evil-motion-state-entry-hook (lambda ()
    ;;                                           (set-face-background 'hl-line "#49483E")))
    ;; (add-hook 'evil-emacs-state-entry-hook (lambda ()
    ;;                                          (set-face-background 'hl-line "#49483E")))
    ;; evil-insert-state 使用 evil-emacs-state 的键绑定，但可
    ;; 以用 ESC 退出到 evil-normal-state
    (setq evil-insert-state-map (make-sparse-keymap))
    (define-key evil-insert-state-map (kbd "<escape>") 'evil-normal-state)
    ;; 调整各 State 的键绑定
    (define-key evil-normal-state-map "\C-e" 'evil-end-of-line)
    ;; 只有在前一个命令是 evil-repeat、evil-repeat-pop 或 evil-repeat-pop-next 之
    ;; 一时，才绑定到 evil-repeat-poop-next，否则保留原来的命令
    (define-key evil-normal-state-map (kbd "M-.")
                `(menu-item "" evil-repeat-pop-next :filter
                            ,(lambda (cmd) (if (or (eq last-command 'evil-repeat)
                                                   (eq last-command 'evil-repeat-pop)
                                                   (eq last-command 'evil-repeat-pop-next))
                                               cmd))))
    (define-key evil-visual-state-map "\C-e" 'evil-end-of-line)
    (define-key evil-motion-state-map "\C-e" 'evil-end-of-line)
    ;; 修改 Mode 的初始 State，而不是缺省的 Normal。evil-set-initial-state 只支持
    ;; Major Mode，Minor Mode 要用 add_hook
    (evil-set-initial-state 'help-mode 'emacs)
    (evil-set-initial-state 'magit-log-edit-mode 'emacs)
    (evil-set-initial-state 'xref--xref-buffer-mode 'emacs)
    (add-hook 'org-capture-mode-hook 'evil-emacs-state))

  (use-package evil-collection
    :if (eq bw/ui-style 'evil)
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+END_SRC
