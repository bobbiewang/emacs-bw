* 显示
** 字体

#+BEGIN_SRC emacs-lisp
  (defun bw/set-mono-font ()
    (interactive)
    (progn
      (set-frame-font "-outline-Consolas-normal-r-normal-normal-18-*-*-*-c-*-iso10646-1")
      (dolist (charset '(kana han symbol cjk-misc bopomofo))
        (set-fontset-font (frame-parameter nil 'font)
                          charset (font-spec :family "Microsoft Yahei" :size 20)))))

  (bw/set-mono-font)
#+END_SRC

** 主题

  [[https://github.com/oneKelvinSmith/monokai-emacs][monokai-theme]] 源自 TextMate 的 Monokai Theme，是一个比较舒服的暗色主
题。

#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
               :ensure t
               :config
               (load-theme 'monokai t))
#+END_SRC

** Frame
*** 标题

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '("Emacs BW"))
#+END_SRC

*** 界面

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  ;; 在 modeline 显示列号
  (column-number-mode 1)

  ;; 在 modeline 显示时间
  (display-time)
#+END_SRC

** 最大化

#+BEGIN_SRC emacs-lisp
  (when bw/windows-p
    (set-frame-parameter nil 'fullscreen 'maximized))
#+END_SRC

* 交互
** which-key

  [[https://github.com/justbur/emacs-which-key][which-key]] 可以显示连续键中后续可选的键，不仅酷炫，而且方便使用不是很
常用的键绑定

  which-key 缺省显示键对应的命令或者 prefix（还有后续按键），可以自定
义显示的内容。下面是两个例子。

#+BEGIN_SRC emacs-lisp-example
  ;; 全局设置
  (which-key-add-key-based-replacements
    "C-x C-f" "find files")

  ;; 针对某 Major Mode 设置
  (which-key-add-major-mode-key-based-replacements 'org-mode
    "C-c C-c" "Org C-c C-c"
    "C-c C-a" "Org Attach")
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (setq which-key-idle-delay 0.4)
    :config
    (which-key-mode))
#+END_SRC

** File Name Cache

  File Name Cache 是一个方便的快速打开常用文件的扩展。缺省情况下，在使
用 C-x C-f 的时候，键入 C-TAB 就会显示 File Name Cache 列表。不过，在
终端中使用 Emacs 的时候不能键入 C-TAB，不太方便，可以结合 ido、heml 等
补全框架使用。

#+BEGIN_SRC emacs-lisp
  (use-package filecache
               :commands bw/file-cache-list
               :config
               (file-cache-add-file-list (list "~/.emacs.d/init.el"
                                               "~/initialize.org"))
               (file-cache-add-directory "~/.emacs.d/core/" "config-.*.org")
               (file-cache-add-directory "~/.emacs.d/modules/" "config-.*.org")

               (defun bw/file-cache-list ()
                 (mapcar (lambda (x)
                           (concat (nth 1 x) (nth 0 x)))
                         file-cache-alist)))
#+END_SRC

** ido

  ido 是 Emacs 内置的扩展，缺省横向显示待选项，ido-vertical-mode 可以
将其设置为纵向显示。

#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    ;; 自定义 ido 记录文件的路径
    (setq ido-save-directory-list-file
          (locate-user-emacs-file ".ido.last"))
    (ido-mode 1)
    ;; 可以用 cu 匹配文件名 config-ui.org
    (setq ido-enable-flex-matching t)
    ;; 在任何可以读取文件、目录的地方使用 ido
    (ido-everywhere 1)
    (ido-vertical-mode 1))
#+END_SRC

** Evil
*** Evil Leader

  [[https://github.com/cofi/evil-leader][Evil Leader]]

  [[https://github.com/noctuid/general.el][general.el]] 似乎可以定义多个 Leader Key，可以关注一下。

#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t
    :config
    (evil-leader/set-leader "<SPC>")
    (defun bw/set-space-key-and-name (key def name &rest bindings)
      "设置 SPC 引导的键绑定和显示的名字。"
      (while key
        (evil-leader/set-key key def)
        (if name
            (which-key-add-key-based-replacements
              (format "<SPC> %s" key) name))
        (setq key  (pop bindings)
              def  (pop bindings)
              name (pop bindings)))))
#+END_SRC

*** Evil Mode

  [[https://github.com/emacs-evil/evil/][Evil]] 在 Emacs 中提供了对 vi 的模拟。

  vi 中有各种模式，在 Evil 中成为 State。Evil 内置支持 7 种 State，每
种 State 都有各自的 kemap 和设置选项。
  - Normal (N)
  - Insert (I)
  - Visual (V)
  - Replace (R)
  - Operator-Pending (O)
  - Motion (M)
  - Emacs (E)

  Emacs 中的 Mode 会有一个缺省的 State，这可以通过 evil-*-state-modes
变量设置。下面的例子中把所有缺省为 Emacs State 的 Modes 改为 Motion
State。

#+BEGIN_SRC emacs-lisp-example
  (setq evil-motion-state-modes (append evil-emacs-state-modes evil-motion-state-modes))
  (setq evil-emacs-state-modes nil)
#+END_SRC

  缺省情况下，不同的 State 仅靠 Tag（N、I 等）区别，可以通过设置
Cursor、Tag、mode-line、hl-line 等可视内容提供更醒目的信息

  Evil 的 Insert State 不能使用 Emacs 键绑定，对于传统 Emacs 用户不方
便，可以改为 Emacs State 的键绑定，但同时要保留 ESC 键切换到 Normal
State 的功能。下面的代码可以达到这个目的。

#+BEGIN_SRC emacs-lisp-example
  ;; 方法 1
  (setq evil-insert-state-map (make-sparse-keymap))
  (define-key evil-insert-state-map (kbd "<escape>") 'evil-normal-state)

  ;; 方法 2
  (setcdr evil-insert-state-map nil)
  (define-key evil-insert-state-map
    (read-kbd-macro evil-toggle-key) 'evil-emacs-state)
#+END_SRC

  参考资料
  - [[https://raw.githubusercontent.com/emacs-evil/evil/master/doc/evil.pdf][PDF manual]]
  - [[http://dnquark.com/blog/2012/02/emacs-evil-ecumenicalism/][Emacs + Evil = ecumenicalism]] Evil 缺省适合 Vim 用户，Emacs 用户需
    要进行一些设置
  - [[https://stackoverflow.com/questions/25542097/emacs-evil-mode-how-to-change-insert-state-to-emacs-state-automatically][Emacs evil-mode how to change insert-state to emacs-state automatically]]

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    ;; 激活 Evil Leader 和 Evil Mode
    (global-evil-leader-mode)
    (evil-mode 1)
    ;; evil-insert-state 使用 evil-emacs-state 的键绑定，但可
    ;; 以用 ESC 退出到 evil-normal-state
    (setq evil-insert-state-map (make-sparse-keymap))
    (define-key evil-insert-state-map (kbd "<escape>") 'evil-normal-state)
    ;; 让 Evil 的 State 醒目
    (setq evil-normal-state-cursor '(box "green")
          evil-insert-state-cursor '(bar "red"))
    (setq evil-normal-state-tag (propertize "[N]"
                                            'face '((:background "green" :foreground "black")))
          evil-insert-state-tag (propertize "[I]" 'face
                                            '((:background "red") :foreground "white"))
          evil-visual-state-tag (propertize "[V]"
                                            'face '((:background "grey80" :foreground "black")))
          evil-operator-state-tag (propertize "[O]"
                                              'face '((:background "purple")))
          evil-motion-state-tag (propertize "[M]"
                                            'face '((:background "blue") :foreground "white"))
          evil-emacs-state-tag (propertize "[E]"
                                           'face '((:background "orange" :foreground "black"))))
    ;; 激活 hl-line-mode，一边下面进行自定义
    ;; 注意要和 transient-mark-mode 的颜色（region face）区别开来
    (global-hl-line-mode 1)
    (set-face-background 'region "purple4")
    (add-hook 'evil-normal-state-entry-hook (lambda ()
                                              (set-face-background 'hl-line "#006400")))
    (add-hook 'evil-insert-state-entry-hook (lambda ()
                                              (set-face-background 'hl-line "#49483E")))
    (add-hook 'evil-visual-state-entry-hook (lambda ()
                                              (set-face-background 'hl-line "#49483E")))
    (add-hook 'evil-replace-state-entry-hook (lambda ()
                                              (set-face-background 'hl-line "#49483E")))
    (add-hook 'evil-operator-state-entry-hook (lambda ()
                                                (set-face-background 'hl-line "#49483E")))
    (add-hook 'evil-motion-state-entry-hook (lambda ()
                                              (set-face-background 'hl-line "#49483E")))
    (add-hook 'evil-emacs-state-entry-hook (lambda ()
                                             (set-face-background 'hl-line "#49483E"))))
#+END_SRC
