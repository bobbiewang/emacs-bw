#+TITLE:     搜索和替换

* Incremental Search

  Incremental Search 除了最直观的搜索，还有许多调整编辑内容、搜索选项、
高亮结果等功能。进入 Incremental Search 后，可以通过 C-h C-h 查看帮助
信息。

  下面是常用的键绑定。

  | RET        | 退出 isearch，光标停留在当前位置   |
  | C-g        | 退出 isearch，光标返回到起始位置   |
  |------------+------------------------------------|
  | C-w        | 把光标处下一个 word 加入搜索字符串 |
  | C-y        | 粘贴剪贴板中当前内容作为搜索字符串 |
  | M-y        | 提取剪贴板中历史内容作为搜索字符串 |
  | M-e        | 编辑搜索字符串                     |
  |------------+------------------------------------|
  | M-c, M-s c | 切换大小写敏感                     |
  | M-r, M-s r | 切换正则表达式                     |
  | M-%        | 切换到替换                         |

  另外，M-s 是许多键绑定的前缀（如切换 Word、Symbol，高亮，调用 occur
等），可以在 Incremental Search 中借助 which-key 查看提示并使用。

#+BEGIN_SRC emacs-lisp
  (use-package isearch
    :ensure nil
    :bind (("C-s"   . isearch-forward-regexp)
           ("C-r"   . isearch-backward-regexp)
           ("C-M-s" . isearch-forward)
           ("C-M-r" . isearch-backward)
           :map isearch-mode-map
           ;; 增加向后、向前搜索的键绑定（缺省是 C-s、C-r）
           ("<left>"  . isearch-repeat-backward)
           ("<right>" . isearch-repeat-forward)
           ("<S-f3>"  . isearch-repeat-backward)
           ("<f3>"    . isearch-repeat-forward)
           ;; 增加上翻、下翻搜索历史的键绑定（缺省是 M-p、M-n）
           ("<up>"    . isearch-ring-retreat)
           ("<down>"  . isearch-ring-advance)
           ;; 用 C-o 显示当前查找内容的 occur 结果
           ("C-o"     . bw/isearch-switch-occur))
    :init
    (defun bw/isearch-switch-occur ()
      (interactive)
      (let ((case-fold-search isearch-case-fold-search))
        (occur (if isearch-regexp isearch-string
                 (regexp-quote isearch-string))))))
#+END_SRC

* anzu

  在 Emacs 中进行搜索的时候，[[https://github.com/syohex/emacs-anzu][anzu]] 在 mode-line 中显示匹配项的数目，以
及当前项的序号。

  可以通过 global-anzu-mode 全局启用 anzu，或者通过 anzu-mode 在某些情况启用
anzu minor mode。

#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :ensure t
    :delight
    :init
    (setq anzu-search-threshold 100)
    (setq anzu-replace-threshold 100)
    :config
    (global-anzu-mode 1))
#+END_SRC

* ag

  [[https://github.com/Wilfred/ag.el/][ag]] 支持在 Emacs 中用 Silver Searcher 程序搜索。其他一些命令，比如
projectile-ag，也需要 ag 的支持。

#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t
    :defer t
    :config
    (setq ag-highlight-search t)
    (setq ag-arguments '("--vimgrep" "--smart-case" "--stats")))
#+END_SRC

n* ripgrep

  [[https://github.com/dajva/rg.el][rg]] 支持在 Emacs 中用 ripgrep 程序搜索。

#+BEGIN_SRC emacs-lisp
  (use-package rg
    :ensure t
    :defer t
    :config
    (rg-enable-default-bindings))
#+END_SRC

  [[https://github.com/nlamirault/ripgrep.el][ripgrep]] 没有 rg 好用，但 projectile-ripgrep 依赖于这个包。

#+BEGIN_SRC emacs-lisp
  (use-package ripgrep
    :ensure t
    :defer t)
#+END_SRC

* wgrep

  和 counsel-ag 配合：
  - 在 counsel-ag 搜索结果中 C-c C-o 打开 ivy-occur
  - C-x C-q 进入 wgrep 模式，修改内容
  - C-c C-c 完成修改，这时修改只在 Buffer 里，没有保存到文件
  - M-x wgrep-save-all-buffers 保存修改

#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :ensure t
    :defer t)
#+END_SRC
