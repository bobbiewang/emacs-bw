#+TITLE:     Navigation

* Emacs 内置 Navigation 命令

  | 单位      | 前移        | 后移        | 删除                          |
  |-----------+-------------+-------------+-------------------------------|
  | char      | C-b         | C-f         | C-d, backspace                |
  | word      | M-b         | M-f         | M-d, M-backspace, C-backspace |
  | sentence  | M-a         | M-e         |                               |
  | paragraph | C-up, M-{   | C-down, M-} |                               |
  | document  | M-<, C-home | M->, C-end  |                               |
  |-----------+-------------+-------------+-------------------------------|
  | sexp      | C-M-left    | C-M-right   |                               |
  | list      | C-M-up      | C-M-down    |                               |
  | defun     | C-M-home    | C-M-end     |                               |

* Cursor
** Avy

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :init
    (bw/set-space-key-and-name
     "<SPC>" 'avy-goto-word-1 "avy word"))
#+END_SRC

** winum

  [[https://github.com/deb0ch/emacs-winum][winum]] 给每个 Window 编号，可以通过编号快速跳转到指定
Windows。

#+BEGIN_SRC emacs-lisp
  (use-package winum
    :ensure t
    :init
    (bw/set-space-key-and-name
     "0" 'winum-select-window-0 "window 0"
     "1" 'winum-select-window-1 "window 1"
     "2" 'winum-select-window-2 "window 2"
     "3" 'winum-select-window-3 "window 3"
     "4" 'winum-select-window-4 "window 4")
    :config
    (winum-mode 1))
#+END_SRC

* Tag
** GNU GLOBAL

  [[https://www.gnu.org/software/global/][GNU GLOBAL]] 内置支持 6 种语言：C、C++、Yacc、Java、PHP4 和 Assembly。
通过 Pygmentes 和 Ctags，可以支持 25 种语言，如 C#、JavaScript、Lisp、
Python、Ruby、Tcl、Verilog、Vhdl 等。

*** helm-gtags

  [[https://github.com/syohex/emacs-helm-gtags][helm-gtags]] 为 GNU Global 提供了 Helm 接口。

  启用 helm-gtags 后，会将 M-x 绑定到类似传统 Tag 用法的
helm-gtags-find-tag，可以将其绑定到 helm-gtags.dwim 实现更灵活的功能。
  - 从 include 语句跳转到文件
  - 从定义跳转到引用
  - 从引用跳转到定义

  但是，传统 Tag 用法的返回键绑定 M-,（缺省是 tags-loop-continue）没有
绑定到 helm-gtags-pop-stack，需要绑定一下。

  下面是其他常用的命令。
  - helm-gtags-tags-in-this-function
  - helm-gtags-select
  - helm-gtags-previous-history
  - helm-gtags-next-history
  - helm-gtags-show-stack

#+BEGIN_SRC emacs-lisp
  (use-package helm-gtags
    :if (eq bw/completion-framework 'helm)
    :ensure t
    :init
    (setq helm-gtags-ignore-case t
          helm-gtags-auto-update t
          helm-gtags-use-input-at-cursor t
          helm-gtags-pulse-at-cursor t
          helm-gtags-prefix-key "\C-cg"
          helm-gtags-suggested-key-mapping t)
    (add-hook 'c-mode-hook 'helm-gtags-mode)
    (add-hook 'c++-mode-hook 'helm-gtags-mode))
#+END_SRC

*** counsel-gtags

  [[https://github.com/syohex/emacs-counsel-gtags][counsel-gtags]] 为 GNU Global 提供了 Ivy 接口。

  下表是 counsel-gtags 提供的命令。对于查找命令，跳转前的位置会压到
Context Stack，可以通过 counsel-gtags-go-backward 和
counsel-gtags-go-forward 两个命令浏览。

  如果设置 counsel-gtags-use-suggested-key-map 为 t，则会自动设置推荐
的键绑定。

  | 命令                          | 说明                     | 推荐键绑定            |
  |-------------------------------+--------------------------+-----------------------|
  | counsel-gtags-dwim            | 从定义查找引用，或者反之 |                       |
  | counsel-gtags-find-definition | 查找定义                 | C-c d 或 C-c t 或 M-. |
  | counsel-gtags-find-reference  | 查找引用                 | C-c r                 |
  | counsel-gtags-find-symbol     | 查找符号                 | C-c s                 |
  |-------------------------------+--------------------------+-----------------------|
  | counsel-gtags-find-file       | 查找文件                 |                       |
  |-------------------------------+--------------------------+-----------------------|
  | counsel-gtags-go-backward     | 后退                     | M-*                   |
  | counsel-gtags-go-forward      | 前进                     | C-t                   |
  |-------------------------------+--------------------------+-----------------------|
  | counsel-gtags-create-tags     | 创建 Tag 文件            |                       |
  | counsel-gtags-update-tags     | 更新 Tag 文件            |                       |

  引用和符号的区别在于符号的范围更广，比如 C++ 的关键字 class 也属于符
号。

#+BEGIN_SRC emacs-lisp
    (use-package counsel-gtags
      :if (eq bw/completion-framework 'ivy)
      :ensure t
      :delight  " gtags"
      :init
      (add-hook 'c-mode-hook 'counsel-gtags-mode)
      (add-hook 'c++-mode-hook 'counsel-gtags-mode)
      :config
      (define-key counsel-gtags-mode-map (kbd "M-.") 'counsel-gtags-find-definition)
      (define-key counsel-gtags-mode-map (kbd "M-,") 'counsel-gtags-go-backward)
      (define-key counsel-gtags-mode-map (kbd "M-?") 'counsel-gtags-find-reference)
      (define-key counsel-gtags-mode-map (kbd "C-,") 'counsel-gtags-find-file)
      (define-key counsel-gtags-mode-map (kbd "C-.") 'counsel-gtags-find-symbol))
#+END_SRC

*** ggtags

  Projectile 后台依赖于 ggtags。在运行 projectile-regenerate-tags 命令
的时候，如果检测到安装了 ggtags，会使用 gtags 创建 Tag，否则使用 ctags。
所以，即使使用 helm-gtags，还是要安装 ggtags。

#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :ensure t)
#+END_SRC
