#+TITLE:     Navigation

* Emacs 内置 Navigation 命令

  | 单位      | 前移        | 后移        | 删除                          |
  |-----------+-------------+-------------+-------------------------------|
  | char      | C-b         | C-f         | C-d, backspace                |
  | word      | M-b         | M-f         | M-d, M-backspace, C-backspace |
  | sentence  | M-a         | M-e         |                               |
  | paragraph | C-up, M-{   | C-down, M-} |                               |
  | document  | M-<, C-home | M->, C-end  |                               |
  |-----------+-------------+-------------+-------------------------------|
  | sexp      | C-M-left    | C-M-right   |                               |
  | list      | C-M-up      | C-M-down    |                               |
  | defun     | C-M-home    | C-M-end     |                               |

* Cursor
** Avy

#+BEGIN_SRC emacs-lisp
  ;; -*- lexical-binding: t -*-

  (use-package avy
    :ensure t
    :defer t
    :init
    (bw/define-keys-and-names
     "<SPC>" 'avy-goto-word-1 "avy word"))
#+END_SRC

** winum

  [[https://github.com/deb0ch/emacs-winum][winum]] 给每个 Window 编号，可以通过编号快速跳转到指定 Windows。

#+BEGIN_SRC emacs-lisp
  (use-package winum
    :ensure t
    :defer t
    :init
    (bw/define-keys-and-names
     "0" 'winum-select-window-0 "window 0"
     "1" 'winum-select-window-1 "window 1"
     "2" 'winum-select-window-2 "window 2"
     "3" 'winum-select-window-3 "window 3"
     "4" 'winum-select-window-4 "window 4")
    :config
    (winum-mode 1))
#+END_SRC

** back-button

#+BEGIN_SRC emacs-lisp
  (use-package back-button
    :ensure t
    :bind (("<C-left>"  . back-button-global-backward)
           ("<C-right>" . back-button-global-forward))
    :init
    (back-button-mode 1))
#+END_SRC

* Tags

  常见的 Tags 格式有 etags、ctags、gtags 和 Cscope。
  - etags 是 Emacs 的 Tag 文件，只支持查找定义。
  - ctags 一开始是 Vi 的 Tags 文件，也只支持查找定义，但信息比 etags 更丰富一点
    （比如一个 Tag 是类还是函数）。现在 Emacs 的一些扩展也支持 ctags 文件。
  - gtags 对于一些内置支持的语言，支持查找定义和引用。
  - Cscope 提供更多强大的功能，如函数的调用关系，但只支持 C、C++、Java 语言。

  常用的 Tag 生成工具有 Universal Ctags、GLOBAL gtags。
  - Universal Ctags 可以生成 etags、ctags 格式的 Tags 文件
  - GLOBAL gtags 可以生成 gtags 格式的 Tags 文件

  | Tags 格式 | Tags 文件名        | 生成方法  |
  |-----------+--------------------+-----------|
  | etags     | tags               | ctags -eR |
  | ctags     | TAGS               | ctags -R  |
  | gtags     | GPATH GRTAGS GTAGS | gtags     |

** etags

  Emacs 内置对 etags 的支持。

  通过 M-x visit-tags-table 指定 Tags 文件，然后就可以通过 M-. 查找 Tag 定义了。

*** counsel-etags

  第一次运行 counsel-etags 命令会提示自动生成 Tags 文件，也可以用
counsel-etags-scan-codes 手动生成 Tags 文件。

  counsel-etags 是独立于 Emacs 内置的 etags 支持的，不会使用 tags-table-list 等
变量。

  | 命令                            | 说明                   |
  |---------------------------------+------------------------|
  | counsel-etags-find-tag-at-point | 查找当前 Tag 的定义    |
  | counsel-etags-find-tag          | 输入正则表达式查找 Tag |
  | counsel-etags-list-tag          | 列出所有 Tag           |

#+BEGIN_SRC emacs-lisp
  (use-package counsel-etags
    :ensure t
    :commands (counsel-etags-find-tag-at-point)
    ;; :init
    ;; 自动更新 Tags 文件
    ;; (add-hook 'prog-mode-hook
    ;;       (lambda ()
    ;;         (add-hook 'after-save-hook
    ;;           'counsel-etags-virtual-update-tags 'append 'local)))
    :config
    (setq counsel-etags-update-interval 60)
    ;; 忽略一些文件和目录
    (push "TAGS" counsel-etags-ignore-filenames)
    (push "build" counsel-etags-ignore-directories))
#+END_SRC

** ctags
*** Citre

  [[https://github.com/universal-ctags/citre][Citre]] 是 ctags 前端，提供自动补全、xref、imenu 支持和代码的浏览功能。

  Citre 使用的是 ctags 格式的文件，而不是 etags 格式。Citre 通过 readtags 程序检
索 tags文件。得益于 ctags 内的排序存储和readtags 的二分搜索，Citre 在大项目中也
拥有不错的速度。

  用户可以手动生成 ctags 文件，也可以在 Emacs 中 M-x citre-update-this-tags-file
交互式生成 ctags 文件。

  如果要 Citre 提供自动补全、xref 和 imenu 功能，需要启动 citre-mode。下面是在
hook 里启用的例子。

#+BEGIN_SRC emacs-lisp-example
  (add-hook 'find-file-hook #'citre-auto-enable-citre-mode)
#+END_SRC

  如果只要代码的浏览功能，生成 ctags 文件后直接使用 citre-jump、citre-peek 等命
令即可。

  citre-peek-keymap 定义了若干可以在 citre-peak 窗口里使用的键绑定。

  | 键绑定             | 说明                                      |
  |--------------------+-------------------------------------------|
  | M-n/p              | 按行滚动 Peak 窗口代码                    |
  | M-N/P              | 切换到下/上个定义                         |
  | M-l j              | 在 Peek 窗口显示 Ace 界面，可以跳转到定义 |
  | left/right/up/down | 浏览 Peek 历史树                          |
  | M-d/D              | 删除 Peak 历史书分支/全部                 |
  | C-g                | 关闭 Peek 窗口                            |

#+BEGIN_SRC emacs-lisp
  (use-package citre
    :ensure t
    :defer t
    :init
    (require 'citre-config)
    (global-set-key (kbd "C-x c a") 'citre-ace-peek)
    (global-set-key (kbd "C-x c j") 'citre-jump)
    (global-set-key (kbd "C-x c J") 'citre-jump-back)
    (global-set-key (kbd "C-x c p") 'citre-peek)
    (global-set-key (kbd "C-x c u") 'citre-update-this-tags-file)
    :config
    ;; 当 xref 后端失败时，使用 Citre
    (define-advice xref--create-fetcher (:around (-fn &rest -args) fallback)
      (let ((fetcher (apply -fn -args))
            (citre-fetcher
             (let ((xref-backend-functions '(citre-xref-backend t)))
               (apply -fn -args))))
        (lambda ()
          (or (with-demoted-errors "%s, fallback to citre"
                (funcall fetcher))
              (funcall citre-fetcher)))))
    ;; 递归向上层目录寻找 tags 文件过程中不处理符号链接
    (define-advice citre-tags-file-path
        (:around (orig-fun &rest args) no-follow-link)
      (cl-letf (((symbol-function 'file-truename) #'concat))
        (apply orig-fun args))))
#+END_SRC

** gtags

  [[https://www.gnu.org/software/global/][GNU GLOBAL]] 是一个开源的 Tag 系统，内置支持 6 种语言：C、C++、Yacc、
Java、PHP4 和 Assembly。通过 Pygmentes 和 Ctags，可以支持 25 种语言，
如 C#、JavaScript、Lisp、Python、Ruby、Scheme、Tcl、Verilog、Vhdl 等。

*** ggtags

  [[https://github.com/leoliu/ggtags][ggtags]] 为 GNU GLOBAL 提供了 Emacs 中的前端。

  安装 ggtags 后，M-x ggtags-mode 激活，然后 M-.（ggtags-find-tag-dwim）
查找当前位置的 Tag。如果这时 Tag 文件还没有生成，ggtags 会询问项目的根
目录并生成 Tag 文件。另外，也可以 M-x ggtags-create-tags 生成 Tag 文件。

  Projectile 后台依赖于 ggtags。在运行 projectile-regenerate-tags 命令
的时候，如果检测到安装了 ggtags，会使用 gtags 创建 Tag 文件。

#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :ensure t
    :defer t)
#+END_SRC

*** helm-gtags

  [[https://github.com/syohex/emacs-helm-gtags][helm-gtags]] 为 GNU Global 提供了 Helm 接口。

  启用 helm-gtags 后，会将 M-x 绑定到类似传统 Tag 用法的
helm-gtags-find-tag，可以将其绑定到 helm-gtags.dwim 实现更灵活的功能。
  - 从 include 语句跳转到文件
  - 从定义跳转到引用
  - 从引用跳转到定义

  但是，传统 Tag 用法的返回键绑定 M-,（缺省是 tags-loop-continue）没有
绑定到 helm-gtags-pop-stack，需要绑定一下。

  下面是其他常用的命令。
  - helm-gtags-tags-in-this-function
  - helm-gtags-select
  - helm-gtags-previous-history
  - helm-gtags-next-history
  - helm-gtags-show-stack

#+BEGIN_SRC emacs-lisp
  (use-package helm-gtags
    :if (eq bw/completion-framework 'helm)
    :ensure t
    :defer t
    :init
    (setq helm-gtags-ignore-case t
          helm-gtags-auto-update t
          helm-gtags-use-input-at-cursor t
          helm-gtags-pulse-at-cursor t
          helm-gtags-prefix-key "\C-cg"
          helm-gtags-suggested-key-mapping t)
    (add-hook 'c-mode-hook 'helm-gtags-mode)
    (add-hook 'c++-mode-hook 'helm-gtags-mode))
#+END_SRC

*** counsel-gtags

  [[https://github.com/syohex/emacs-counsel-gtags][counsel-gtags]] 为 GNU Global 提供了 Ivy 接口。

  下表是 counsel-gtags 提供的命令。对于查找命令，跳转前的位置会压到
Context Stack，可以通过 counsel-gtags-go-backward 和
counsel-gtags-go-forward 两个命令浏览。

  如果设置 counsel-gtags-use-suggested-key-map 为 t，则会自动设置推荐
的键绑定。

  | 命令                          | 说明                     | 推荐键绑定            |
  |-------------------------------+--------------------------+-----------------------|
  | counsel-gtags-dwim            | 从定义查找引用，或者反之 |                       |
  | counsel-gtags-find-definition | 查找定义                 | C-c d 或 C-c t 或 M-. |
  | counsel-gtags-find-reference  | 查找引用                 | C-c r                 |
  | counsel-gtags-find-symbol     | 查找符号                 | C-c s                 |
  |-------------------------------+--------------------------+-----------------------|
  | counsel-gtags-find-file       | 查找文件                 |                       |
  |-------------------------------+--------------------------+-----------------------|
  | counsel-gtags-go-backward     | 后退                     | M-*                   |
  | counsel-gtags-go-forward      | 前进                     | C-t                   |
  |-------------------------------+--------------------------+-----------------------|
  | counsel-gtags-create-tags     | 创建 Tag 文件            |                       |
  | counsel-gtags-update-tags     | 更新 Tag 文件            |                       |

  引用和符号的区别在于符号的范围更广，比如 C++ 的关键字 class 也属于符
号。

#+BEGIN_SRC emacs-lisp
  (use-package counsel-gtags
    :if (eq bw/completion-framework 'ivy)
    :ensure t
    :delight " gtags"
    :hook (c-mode-common . (lambda ()
                             (when (eq bw/cpp-navigation-backend 'gtags)
                               (counsel-gtags-mode))))
    ; :config
    ; (define-key counsel-gtags-mode-map (kbd "M-.") 'counsel-gtags-find-definition)
    ; (define-key counsel-gtags-mode-map (kbd "M-,") 'counsel-gtags-go-backward)
    ; (define-key counsel-gtags-mode-map (kbd "M-?") 'counsel-gtags-find-reference)
    ; (define-key counsel-gtags-mode-map (kbd "C-,") 'counsel-gtags-find-file)
    ; (define-key counsel-gtags-mode-map (kbd "C-.") 'counsel-gtags-find-symbol)
    )
#+END_SRC

* 基于 Grep 类工具
** Dumb Jump

  [[https://github.com/jacktasia/dumb-jump][Dumb Jump]] 使用 ag、rg、grep 等工具搜索函数、变量的定义。虽然简单粗暴，
但还是相当凑合的。

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :defer t)
#+END_SRC

* xref

  xref 缺省使用 etags 后端，在加载其他扩展后，可能被修改成其他后端。可以通过变量
xref-backend-functions 查看当前支持的后端。

  不过，如果 xref-backend-functions 中定义了多个后端，xref 并不会依次调用各个后
端直到某一个后端返回结果。xref 只是调用第一个后端的函数，然后不管是否成功，都不
会再调下一个后端的函数了。

  可以通过 Advice 修改 xref--create-fetcher 的行为，让其在一个后端失败后，继续尝
试后面的终端。下面是一个例子。

#+BEGIN_SRC emacs-lisp-example
  (defun bw/xref-find-backends ()
    (let (backends
          backend)
      (dolist (f (append xref-backend-functions
                         (default-value 'xref-backend-functions)))
        (when (functionp f)
          (setq backend (funcall f))
          (when backend
            (cl-pushnew backend backends))))
      (reverse (delete-dups backends))))

  (defun bw/xref--create-fetcher (input kind arg)
    "Return an xref list fetcher function.

  It revisits the saved position and delegates the finding logic to
  the xref backend method indicated by KIND and passes ARG to it."
    (let* ((orig-buffer (current-buffer))
           (orig-position (point))
           (backends (bw/xref-find-backends))
           (method (intern (format "xref-backend-%s" kind))))
      (lambda ()
        (save-excursion
          ;; Xref methods are generally allowed to depend on the text
          ;; around point, not just on their explicit arguments.
          ;;
          ;; There is only so much we can do, however, to recreate that
          ;; context, given that the user is free to change the buffer
          ;; contents freely in the meantime.
          (when (buffer-live-p orig-buffer)
            (set-buffer orig-buffer)
            (ignore-errors (goto-char orig-position)))
          (let (xrefs)
            (cl-dolist (backend backends)
              (ignore-errors
                (setq xrefs (funcall method backend arg))
                (when xrefs
                  (cl-return))))
            (unless xrefs
              (xref--not-found-error kind input))
            xrefs)))))
  (advice-add #'xref--create-fetcher :override #'bw/xref--create-fetcher)

  (with-eval-after-load 'dumb-jump
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))

  (with-eval-after-load 'citre
    (add-hook 'xref-backend-functions #'citre-xref-backend))
#+END_SRC

  下面是另一个例子。

#+BEGIN_SRC emacs-lisp-example
  (defun bw/xref-find-backends()
    (let (backends)
      (run-hook-wrapped 'xref-backend-functions
                        (lambda (f)
                          (when (functionp f)
                            (setq backend (funcall f))
                            (when backend
                              (cl-pushnew backend backends)))
                          nil))
      (reverse backends)))

  (defun bw/xref--create-fetcher (input kind arg)
    (let* ((orig-buffer (current-buffer))
           (orig-position (point))
           (backends (bw/xref-find-backends))
           (method (intern (format "xref-backend-%s" kind))))
      (lambda ()
        (save-excursion
          (when (buffer-live-p orig-buffer)
            (set-buffer orig-buffer)
            (ignore-errors (goto-char orig-position)))
          (let (xrefs)
            (cl-dolist (backend backends)
              (ignore-errors
                (setq xrefs (funcall method backend arg))
                (when xrefs
                  (cl-return))))
            (unless xrefs
              (xref--not-found-error kind input))
            xrefs)))))

  (advice-add #'xref--create-fetcher :override #'bw/xref--create-fetcher)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package xref
    :ensure nil
    :init
    (general-define-key :keymaps 'normal
                        "g." 'xref-find-definitions))
#+END_SRC
