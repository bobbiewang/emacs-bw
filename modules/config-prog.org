#+TITLE:     编程

* Compile

#+BEGIN_SRC emacs-lisp
  (use-package compile
    :ensure nil
    :bind (([f6] . compile)))
#+END_SRC

* Flycheck

  [[http://www.flycheck.org/][Flycheck]] 是个现代的实时语法检查工具，可以替代 Flymake。

  | flycheck-list-errors      | 列出当前 Buffer 的错误         |
  | flycheck-buffer           | 检查当前 Buffer                |
  | flycheck-verify-setup     | 检查当前的 Checker 的设置      |
  | flycheck-describe-checker | 查看指定 Checker 的介绍        |
  | flycheck-select-checker   | 为当前 Buffer 选用指定 Checker |
  | flycheck-disable-checker  | 为当前 Buffer 禁用指定 Checker |

  对于不同的语言，Flycheck 支持不同的 Checker，比如 C/C++ 可选
c/c++-clang、c/c++-gcc 和 c/c++-cppcheck。

  - C/C++
    - c/c++-clang
      - flycheck-clang-include-path :: 当前 C/C++ 文件的 Include Path
      - flycheck-clang-definitions :: 当前 C/C++ 文件的编译参数的宏
      - flycheck-clang-args :: 当前 C/C++ 文件的其他编译参数

  如果在 Windows 平台使用 Cygwin，Flycheck 的 c/c++-lang Checker 使用
clang.exe。可是 Cygwin 缺省是安装 /bin/clang-N.0.exe，然后创建
/bin/clang 链接。这样的话，Flycheck 就找不到 Clang 的可执行程序了。解
决的方法是将 /bin/clang-N.0.exe 复制为 /bin/clang.exe。

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    ;; 禁用一些 checker
    ;; - emacs-lisp-checkdoc，以免在编辑 Org 中的 Emacs Lisp 代码时显示
    ;;   多余的错误信息
    ;; - c/c++-clang c/c++-gcc，速度慢，影响 C/C++ 文件编辑
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc
                                               c/c++-clang
                                               c/c++-gcc))
    ;; 使用 C++11 标准，这个也可以在 c++-mode-hook 中设置
    (setq flycheck-clang-language-standard "c++11")
    (global-flycheck-mode))
#+END_SRC

* AutoHotkey

  [[https://github.com/ralesi/ahk-mode][ahk-mode]] 支持 AutoHotkey 脚本（.ahk）的开发。
  - 语法高亮
  - 通过 Company 或者 Auto-complete 补全
  - 缩进
  - 注释
  - 查找文档

#+BEGIN_SRC emacs-lisp
  (use-package ahk-mode
    :ensure t
    :defer t)
#+END_SRC

* C#

#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode
    :ensure t
    :defer t)
#+END_SRC

* Scheme

  [[https://github.com/greghendershott/racket-mode][racket-mode]] 为 [[http://www.racket-lang.org/][Racket]] 提供了语法高亮、REPL 等功能的支持。

  如果安装的是 Minimal Racket，需要运行 raco pkg install drracket 在
Racket 中安装必要的包，才能使用 racket-mode。在 Windows 系统中，这些包
安装在 %APPDATA%/Racket。

#+BEGIN_SRC emacs-lisp
  (use-package racket-mode
    :ensure t
    :defer t
    :init
    (add-hook 'racket-mode-hook 'yas-minor-mode)
    :config
    (evil-set-initial-state 'racket-repl-mode 'insert))
#+END_SRC

* Verilog

#+BEGIN_SRC emacs-lisp
  (use-package verilog-mode
    :ensure nil
    :bind (:map verilog-mode-map
                ;; 取消原来绑定命令 electric-verilog-semi-with-comment
                ;; 恢复到到全局的绑定
                ("C-;" . set-mark-command)))
#+END_SRC
