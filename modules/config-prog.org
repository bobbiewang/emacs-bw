#+TITLE:     编程

* 说明

  下面是一些用于配置的变量。

#+BEGIN_SRC emacs-lisp
  ;;; -*- lexical-binding: t; -*-
  (defvar bw/lsp-client 'eglot
    "LSP 客户端，可选 'eglot、'lsp-mode 。")
#+END_SRC

* Prog Mode

  prog-mode 派生出各种编程语言的 mode。

* Compile

#+BEGIN_SRC emacs-lisp
  (use-package compile
    :ensure nil
    :bind (([f6] . compile))
    :config
    ;; 让 *compilation* Buffer 支持终端的 ANSI 颜色
    (require 'ansi-color)
    (defun bw/colorize-compilation-buffer ()
      (let ((inhibit-read-only t))
        (ansi-color-apply-on-region (point-min) (point-max))))
    (add-hook 'compilation-filter-hook 'bw/colorize-compilation-buffer))
#+END_SRC

* format-all

  [[https://github.com/lassik/emacs-format-all-the-code][format-all]] 支持许多语言的格式化，其原理是调用各语言的格式化程序。比如 C/C++ 语
言支持 clang-format。

  可以使用 format-all-region-or-buffer 等命令手动进行格式化，也可以启用
format-all-mode 进行自动格式化。

#+BEGIN_SRC emacs-lisp
  (use-package format-all
    :commands format-all-region-or-buffer
    :hook ((c++-mode . format-all-mode)
           (python-mode . format-all-mode))
    :config
    (setq-default format-all-formatters
                  '(("C++" (clang-format))
                    ("Python" (ruff)))))
#+END_SRC

* multi-compile

  [[https://github.com/ReanGD/emacs-multi-compile][multi-compile]] 可以根据 Major Mode、file 后缀、buffer 名、任意 elisp expression，
设定 compile 命令行。如果需要的话，还可以指定运行 compile 命令的目录。

#+BEGIN_SRC emacs-lisp
  (use-package multi-compile
    :ensure t
    :bind (([f6] . multi-compile-run))
    :init
    ;; 设置 multi-compile 的 cache 文件
    (setq multi-compile-history-file
          (expand-file-name "emacs/multi-compile.cache" (xdg-cache-home)))
    :config
    ;; 使用 Ivy 为补全后端时，用 completing-read
    (if (eq bw/completion-framework 'ivy)
        (setq multi-compile-completion-system 'default))
    ;; 配置编译命令列表
    (setq multi-compile-alist
          '((c++-mode . (("solo-compile" . "g++ -g -Wall %file-name -o %file-sans")
                         ("solo-run"     . "g++ -g -Wall %file-name -o %file-sans && ./%file-sans")
                         ("solo-clean"   . "rm -f %file-sans %file-sans.exe")
                         ("make"         . "make --no-print-directory -C %make-dir")))
            (rust-mode . (("rust-debug"   . "cargo run")
                          ("rust-release" . "cargo run --release")
                          ("rust-test"    . "cargo test"))))))
#+END_SRC

* Language Server
** eglot

  [[https://github.com/joaotavora/eglot][eglot]] 是 Emacs LSP Client。和 lsp-mode 相比，eglot 的设计有如下特点。
  - 轻量级，速度快，占用内存少
  - 依赖少，只需要 Emacs 内置的包
  - 开箱即用，把 eglot-ensure 函数加到相应的 Mode Hook 即可
  - Emacs 29 开始内置

  使用 eglot，首先要确保对应语言的 LSP Server 已经安装。eglot 内置了许多 LSP
Server 的支持，可以通过变量 eglot-server-programs 查看详细列表。下面是一些常用语
言的 LSP Server。
  - C/C++：clangd、ccls
  - Javascript：TS & JS Language Server
  - Python：pylsp、pyls、pyright、jedi-language-server
  - Ruby：solargraph

  可以通过 eglot-server-programs 添加或者修改 LSP Server，下面是一个例子。

#+BEGIN_SRC emacs-lisp-example
  (add-to-list 'eglot-server-programs
               '((c++-mode c-mode) . ("clangd" "--header-insertion=never")))
#+END_SRC

  C/C++ LSP Server 需要知道源文件的编译参数。以 clangd 为例，可以从
compile_commands.json 或 compile_flags.txt 读取编译参数。
  - compile_commands.json：从文件所在目录向父目录递归查找，查找时检查目录下和
    build 子目录下面是否有 compile_commands.json 文件
  - compile_flags.txt：在项目根目录下查找
  - 如果找不到上述文件，假设编译的命令行是 clang source.cpp

  编辑文件时通过 M-x eglot 启动 LSP Server，让 eglot 开始管理项目下的文件。项目
文件可以是一个源代码文件，也可以是一个 Emacs Project 下的的文件。Emacs Project有
两种：
  1. 通过 VCS 特征目录确定（如 .git）
  2. EDE Project（通过 ede-new 命令创建）

  还可以通过 hook 为某些 Mode 自动激活 eglot，下面是一些例子。

#+BEGIN_SRC emacs-lisp-example
:hook ((prog-mode . (lambda ()
                      (unless (derived-mode-p
                               'emacs-lisp-mode
                               'lisp-mode
                               'makefile-mode)
                        (eglot-ensure))))
      ((markdown-mode yaml-mode) . eglot-ensure))
#+END_SRC

  下面是常用的 eglot 命令。

  | 命令                      | 说明                                      |
  |---------------------------+-------------------------------------------|
  | eglot                     | 启动 LSP Server                           |
  | eglot-shutdown            | 终止 LSP Server                           |
  |---------------------------+-------------------------------------------|
  | eglot-find-declaration    | 跳转到声明                                |
  | eglot-find-implementation | 跳转到实现                                |
  | eglot-find-typeDefinition | 跳转到类型定义                            |
  |---------------------------+-------------------------------------------|
  | eglot-rename              | 重命名当前 Symbol，会同时修改其他相关位置 |
  | eglot-code-actions        | 当前代码的 Code Action                    |

  另外，eglot 启动后会替换（增强） xref-find-definitions、xref-find-references、
imenu、eldoc 等功能。

  如果要更新 Emacs 内置的 eglot，可以 M-x eglot-upgrade-eglot。

#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :if (eq bw/lsp-client 'eglot)
    :ensure t
    :commands (eglot eglot-ensure)
    :hook ((c-mode c++-mode python-mode) . eglot-ensure))
#+END_SRC

** lsp

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :if (eq bw/lsp-client 'lsp-mode)
    :hook (prog-mode . lsp-deferred)
    :custom
    (lsp-keymap-prefix "C-c l")
    (lsp-prefer-capf t)
    (lsp-auto-guess-root t)
    (lsp-keep-workspace-alive nil)
    :bind (:map lsp-mode-map
                ("C-c f" . lsp-format-region)
                ("C-c d" . lsp-describe-thing-at-point)
                ("C-c a" . lsp-execute-code-action)
                ("C-c r" . lsp-rename))
    :init
    (setq lsp-session-file (expand-file-name
                        "emacs/lsp-session-v1" (xdg-cache-home))))
#+END_SRC

** lsp-ui

#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :if (eq bw/lsp-client 'lsp-mode)
    :commands lsp-ui-mode)
#+END_SRC

* Flycheck

  [[http://www.flycheck.org/][Flycheck]] 是个现代的实时语法检查工具，可以替代 Flymake。

  | flycheck-list-errors      | 列出当前 Buffer 的错误         |
  | flycheck-buffer           | 检查当前 Buffer                |
  | flycheck-verify-setup     | 检查当前的 Checker 的设置      |
  | flycheck-describe-checker | 查看指定 Checker 的介绍        |
  | flycheck-select-checker   | 为当前 Buffer 选用指定 Checker |
  | flycheck-disable-checker  | 为当前 Buffer 禁用指定 Checker |

  对于不同的语言，Flycheck 支持不同的 Checker，比如 C/C++ 可选
c/c++-clang、c/c++-gcc 和 c/c++-cppcheck。

  - C/C++
    - c/c++-clang
      - flycheck-clang-include-path :: 当前 C/C++ 文件的 Include Path
      - flycheck-clang-definitions :: 当前 C/C++ 文件的编译参数的宏
      - flycheck-clang-args :: 当前 C/C++ 文件的其他编译参数

  如果在 Windows 平台使用 Cygwin，Flycheck 的 c/c++-lang Checker 使用
clang.exe。可是 Cygwin 缺省是安装 /bin/clang-N.0.exe，然后创建
/bin/clang 链接。这样的话，Flycheck 就找不到 Clang 的可执行程序了。解
决的方法是将 /bin/clang-N.0.exe 复制为 /bin/clang.exe。

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    ;; 禁用一些 checker
    ;; - emacs-lisp-checkdoc，以免在编辑 Org 中的 Emacs Lisp 代码时显示
    ;;   多余的错误信息
    ;; - c/c++-clang c/c++-gcc，速度慢，影响 C/C++ 文件编辑
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc
                                               c/c++-clang
                                               c/c++-gcc))
    ;; 使用 C++11 标准，这个也可以在 c++-mode-hook 中设置
    (setq flycheck-clang-language-standard "c++11")
    (global-flycheck-mode))
#+END_SRC

* AutoHotkey

  [[https://github.com/ralesi/ahk-mode][ahk-mode]] 支持 AutoHotkey 脚本（.ahk）的开发。
  - 语法高亮
  - 通过 Company 或者 Auto-complete 补全
  - 缩进
  - 注释
  - 查找文档

#+BEGIN_SRC emacs-lisp
  (use-package ahk-mode
    :ensure t
    :defer t)
#+END_SRC

* C#

#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode
    :ensure t
    :defer t)
#+END_SRC

* Scheme

  [[https://github.com/greghendershott/racket-mode][racket-mode]] 为 [[http://www.racket-lang.org/][Racket]] 提供了语法高亮、REPL 等功能的支持。

  | 命令            | 描述                            | 键绑定  |
  |-----------------+---------------------------------+---------|
  | racket-repl     | 启动 Racket REPL                | C-c C-z |
  | racket-run      | 保存当前 Buffer，发送到 REPL    | C-c C-c |
  | racket-describe | 在 Emacs 中显示当前标识符的帮助 | C-c C-. |
  | racket-doc      | 在浏览器中显示当前标识符的帮助  | C-c C-d |

  如果安装的是 Minimal Racket，需要运行 raco pkg install drracket 在
Racket 中安装必要的包，才能使用 racket-mode。在 Windows 系统中，这些包
安装在 %APPDATA%/Racket。

#+BEGIN_SRC emacs-lisp
  (use-package racket-mode
    :disabled t
    :ensure t
    :defer t
    :init
    (add-hook 'racket-mode-hook 'yas-minor-mode)
    :config
    (evil-set-initial-state 'racket-repl-mode 'insert))
#+END_SRC

* Verilog

  [[https://www.veripool.org/wiki/verilog-mode][Verilog-Mode]]

#+BEGIN_SRC emacs-lisp
  (use-package verilog-mode
    :ensure nil
    :mode "\\.vm\\'"
    :init
    (setq verilog-indent-level 2)
    (setq verilog-indent-level-module 2)
    (setq verilog-indent-level-declaration 2)
    (setq verilog-indent-level-behavioral 2)
    :bind (:map verilog-mode-map
                ;; 取消原来绑定命令 electric-verilog-semi-with-comment
                ;; 恢复到到全局的绑定
                ("C-;" . set-mark-command)))
#+END_SRC

* Web
** js2-mode

  [[https://github.com/mooz/js2-mode/][js2-mode]]

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode "\\.js\\'"
    :config
    ;; 设置 JavaScript 缩进
    (setq js2-basic-offset 2))
#+END_SRC

** skewer-mode

  [[https://github.com/skeeto/skewer-mode][skewer-mode]]

#+BEGIN_SRC emacs-lisp
  (use-package skewer-mode
    :ensure t
    :hook ((js2-mode . skewer-mode)
           (css-mode . skewer-css-mode)
           (html-mode . skewer-html-mode)))
#+END_SRC

** Tern

  [[http://ternjs.net/][Tern]] 是 JavaScript 代码分析工具，并提供了 Emacs 前端，支持代码浏览和补全。

#+BEGIN_SRC emacs-lisp
  (use-package tern
    :ensure t
    :hook ((js-mode . tern-mode)
           (js2-mode . tern-mode)))
#+END_SRC

** web-mode

  [[http://web-mode.org/][web-mode]]

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode ("\\.erb\\'" . web-mode)
    :config
    ;; 设置 HTML 缩进
    (setq web-mode-markup-indent-offset 2)
    ;; 设置 CSS 缩进
    (setq web-mode-css-indent-offset 2)
    ;; 设置 JavaScript、PHP、Ruby 等脚本的缩进
    (setq web-mode-code-indent-offset 2))
#+END_SRC

** emmet-mode

  [[https://github.com/smihica/emmet-mode][emmet-mode]] 是 [[https://emmet.io][Emmet]] 在 Emacs 中的实现，可以快速输入 HTML、CSS 代码。

  输入缩写后，用 C-j 展开文本。展开文本后，用 C-M-left 和 C-M-right 在编辑点间跳
转。

#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :hook ((sgml-mode)
           (css-mode))
    :config
    ;; 展开后光标定位到第一个双引号对的位置
    (setq emmet-move-cursor-between-quotes t)
    ;; 在关闭 tag 的 / 前保留一个空格
    (setq emmet-self-closing-tag-style " /"))
#+END_SRC
