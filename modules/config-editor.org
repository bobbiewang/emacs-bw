#+TITLE:     编辑器通用设置

* Scroll

  Emacs 缺省的滚屏方式比较诡异，这里设置平滑的滚屏方式。

#+BEGIN_SRC emacs-lisp
  ;; 光标越出屏幕时，跳回屏幕的行数。设置为 0 的话，光标跳回屏幕中心；设
  ;; 置为一个很大的值，相当于禁止这个功能。注意这时 scroll-margin 要用缺
  ;; 省值 0，否则在终端下文本显示会错乱
  (setq scroll-conservatively 9999)

  ;; 和上面类似，只滚动一行，光标不会跳回多行
  (setq scroll-step 1)

  ;; 翻屏时保持光标在屏幕的位置
  (setq scroll-preserve-screen-position 1)
#+END_SRC

* Line Number

  [[http://elpa.gnu.org/packages/nlinum.html][nlinum]] 可以替换 Emacs 内置的 linum-mode。因为 nlinum 使用 jit-lock，
性能更好。

#+BEGIN_SRC emacs-lisp
  (use-package nlinum
    :ensure t)
#+END_SRC

  [[https://github.com/CodeFalling/nlinum-relative][nlinum-relative]] 为 nlinum-mode 提供显示相对行号的功能。

  下面是几个 nlinum-relative 的定制变量。
  - nlinum-relative-redisplay-delay :: 刷新的 Idle 时间
  - nlinum-relative-current-symbol :: 当前行的显示符号，缺省为 ""，效
       果是显示绝对行号
  - nlinum-relative-offset :: 第二行行号开始的 Offset，缺省为 0

#+BEGIN_SRC emacs-lisp
  (use-package nlinum-relative
    :ensure t
    :config
    (nlinum-relative-setup-evil)          ; 为 Evil 设置
    ;; prog-mode 派生出各种编程语言的 mode
    (add-hook 'prog-mode-hook 'nlinum-relative-mode)
    ;; text-mode 派生出 outline-mode、org-mode、nxml-mode 等
    (add-hook 'text-mode-hook 'nlinum-relative-mode))
#+END_SRC

* Bookmark

  [[https://github.com/joodland/bm][bm]] 是可视化书签。

#+BEGIN_SRC emacs-lisp
  (use-package bm
    :ensure t
    :bind (("<C-f2>" . bm-toggle)
           ("<f2>"   . bm-next)
           ("<S-f2>" . bm-previous)
           ("<M-f2>" . bm-show-all))
    :init
    (bw/set-space-key-and-name
     "bb" 'bm-toggle   "bookmark toggle"
     "bn" 'bm-next     "bookmark next"
     "bl" 'bm-show-all "bookmark list"))
#+END_SRC

* auto-highlight-symbol

  [[https://github.com/gennad/auto-highlight-symbol/][auto-highlight-symbol]] 自动高亮光标处的 Symbol。

#+BEGIN_SRC emacs-lisp
  (use-package auto-highlight-symbol
    :ensure t
    :init
    (setq ahs-idle-interval 1)
    (add-hook 'prog-mode-hook #'auto-highlight-symbol-mode))
#+END_SRC

* indent

#+BEGIN_SRC emacs-lisp
  (defun bw/indent-whole-buffer ()
    "indent whole buffer"
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max)))

  (defun bw/indent-current-paragraph ()
    "indent current paragraph"
    (interactive)
    (save-excursion
      (delete-trailing-whitespace)
      (mark-paragraph)
      (indent-region (region-beginning) (region-end) nil)))

  (bw/set-space-key-and-name
   "bib" 'bw/indent-whole-buffer      "indent buffer"
   "bip" 'bw/indent-current-paragraph "indent paragraph"
   "bir" 'bw/indent-region            "indent region")
#+END_SRC

* expand-region

  [[https://github.com/magnars/expand-region.el][expand-region]] 能够在当前选区的基础上，根据语法、语义扩展选区。

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :init
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

* zzz-to-char

  [[https://github.com/mrkkrp/zzz-to-char][zzz-to-char]] 是内置 zap-to-char 功能的增强：当多个同名的 char 共存的
时候，提供类似 Avy 的界面，让用户选择到底删除到哪个 char。

#+BEGIN_SRC emacs-lisp
  (use-package zzz-to-char
    :ensure t
    :init
    (global-set-key (kbd "M-z") #'zzz-to-char))
#+END_SRC

* clean-aindent-mode

  在自动缩进的编辑模式下，如果连续输入回车，每一行都会留下几个缩进的空
格，[[https://github.com/pmarinov/clean-aindent-mode][clean-aindent-mode]] 可以自动删除这些多余的空格。

#+BEGIN_SRC emacs-lisp
  (use-package clean-aindent-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'clean-aindent-mode))
#+END_SRC

* ws-butler

  [[https://github.com/lewang/ws-butler][ws-butler]] 会自动在保存文件是清除行尾多余空格。因为这个清除只作用于本
次修改的行，所以在处理大文件时性能会比较好。

#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'ws-butler-mode))
#+END_SRC

* visual-regexp

  [[https://github.com/benma/visual-regexp.el][visual-regexp]]

#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :ensure t)
#+END_SRC

* discover-my-major

  [[https://github.com/steckerhalter/discover-my-major][discover-my-major]] 可以列出当前 Mode 的键绑定列表。
  - M-x discover-my-major :: 列出 Major Mode 的键绑定列表
  - M-x discover-my-mode :: 列出 Minor Mode 的键绑定列表

#+BEGIN_SRC emacs-lisp
  (use-package discover-my-major
    :ensure t)
#+END_SRC

* NeoTree

  [[https://github.com/jaypei/emacs-neotree][NeoTree]] 在 Emacs 的 Frame 中嵌入一个树状的目录、文件浏览器。

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :init
    ;; 定制 NeoTree 在 Evil Normal State 下的键绑定
    (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-quick-look)
    (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
    (bw/set-space-key-and-name
     "at" 'neotree-toggle "NeoTree"))
#+END_SRC
