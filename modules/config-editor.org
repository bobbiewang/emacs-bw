#+TITLE:     编辑器通用设置

* Line Number

  [[http://elpa.gnu.org/packages/nlinum.html][nlinum]] 可以替换 Emacs 内置的 linum-mode。因为 nlinum 使用 jit-lock，
性能更好。

#+BEGIN_SRC emacs-lisp
  (use-package nlinum
    :ensure t)
#+END_SRC

  [[https://github.com/CodeFalling/nlinum-relative][nlinum-relative]] 为 nlinum-mode 提供显示相对行号的功能。

  下面是几个 nlinum-relative 的定制变量。
  - nlinum-relative-redisplay-delay :: 刷新的 Idle 时间
  - nlinum-relative-current-symbol :: 当前行的显示符号，缺省为 ""，效
       果是显示绝对行号
  - nlinum-relative-offset :: 第二行行号开始的 Offset，缺省为 0

#+BEGIN_SRC emacs-lisp
  (use-package nlinum-relative
    :ensure t
    :config
    (nlinum-relative-setup-evil)          ; 为 Evil 设置
    (add-hook 'prog-mode-hook 'nlinum-relative-mode)
    (add-hook 'org-mode-hook 'nlinum-relative-mode))
#+END_SRC

* Bookmark

  [[https://github.com/joodland/bm][bm]] 是可视化书签。

#+BEGIN_SRC emacs-lisp
  (use-package bm
    :ensure t
    :init
    (bw/set-space-key-and-name
     "bb" 'bm-toggle   "bookmark toggle"
     "bn" 'bm-next     "bookmark next"
     "bl" 'bm-show-all "bookmark list"))
#+END_SRC

* auto-highlight-symbol

  [[https://github.com/gennad/auto-highlight-symbol/][auto-highlight-symbol]] 自动高亮光标处的 Symbol。

#+BEGIN_SRC emacs-lisp
  (use-package auto-highlight-symbol
    :ensure t
    :init
    (setq ahs-idle-interval 0.2)
    (add-hook 'prog-mode-hook #'auto-highlight-symbol-mode))
#+END_SRC

* indent

#+BEGIN_SRC emacs-lisp
  (defun bw/indent-whole-buffer ()
    "indent whole buffer"
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max)))

  (defun bw/indent-current-paragraph ()
    "indent current paragraph"
    (interactive)
    (save-excursion
      (delete-trailing-whitespace)
      (mark-paragraph)
      (indent-region (region-beginning) (region-end) nil)))
#+END_SRC

* expand-region

  [[https://github.com/magnars/expand-region.el][expand-region]] 能够在当前选区的基础上，根据语法、语义扩展选区。

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :init
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

* visual-regexp

  [[https://github.com/benma/visual-regexp.el][visual-regexp]]

#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :ensure t)
#+END_SRC
