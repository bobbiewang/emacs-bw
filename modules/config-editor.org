#+TITLE:     编辑器通用设置

* Emacs

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :ensure nil
    :delight
    (auto-fill-function " AF"))
#+END_SRC

* Scroll

  缺省情况下，光标超出 Window 边缘时，Emacs 会滚动半个 Window 的内容，
同时光标会定位在 Window 的中间，用起来有点跳脱。这里设置的平滑的滚屏方
式在终端下用会有文本错乱的现象，所以只在图形界面进行设置。

#+BEGIN_SRC emacs-lisp
  (defun bw/smooth-scroll ()
    (interactive)
    (when (display-graphic-p)
      ;; 翻屏时保持光标在屏幕的位置
      (setq scroll-preserve-screen-position 1)
      ;; 光标越出屏幕时，跳回屏幕的行数。设置为 0 的话，光标跳回屏幕中心；设
      ;; 置为一个很大的值，相当于禁止这个功能
      (setq scroll-conservatively 9999)
      ;; 光标移动到离顶端/底端多少行开始滚动。设置为 0 表示到达顶端/底
      ;; 端才滚动；设置为 3 表示距离顶端/底端 3 行就开始滚动
      (setq scroll-margin 3)))

  (bw/smooth-scroll)
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (select-frame frame)
              (bw/smooth-scroll)))
#+END_SRC

* Line Number

#+BEGIN_SRC emacs-lisp
  (use-package display-line-numbers
    :ensure nil
    :hook ((prog-mode . display-line-numbers-mode)
           (text-mode . display-line-numbers-mode))
    :init
    ;; 使用相对行号
    (setq display-line-numbers-type 'relative)
    ;; 一开始就使用合适的宽度，而不是动态调整
    (setq display-line-numbers-width-start t))
#+END_SRC

* Bookmark

  [[https://github.com/joodland/bm][bm]] 是可视化书签。

#+BEGIN_SRC emacs-lisp
  (use-package bm
    :ensure t
    :bind (("<C-f2>" . bm-toggle)
           ("<f2>"   . bm-next)
           ("<S-f2>" . bm-previous)
           ("<M-f2>" . bm-show-all))
    :init
    (bw/set-space-key-and-name
     "bb" 'bm-toggle   "bookmark toggle"
     "bn" 'bm-next     "bookmark next"
     "bl" 'bm-show-all "bookmark list"))
#+END_SRC

* auto-highlight-symbol

  [[https://github.com/gennad/auto-highlight-symbol/][auto-highlight-symbol]] 自动高亮光标处的 Symbol。

#+BEGIN_SRC emacs-lisp
  (use-package auto-highlight-symbol
    :ensure t
    :delight
    :hook (prog-mode . auto-highlight-symbol-mode)
    :init
    (setq ahs-idle-interval 1))
#+END_SRC

* indent

#+BEGIN_SRC emacs-lisp
  (defun bw/indent-current-paragraph ()
    "缩进当前 Paragraph。"
    (interactive)
    (save-excursion
      (delete-trailing-whitespace)
      (mark-paragraph)
      (indent-region (region-beginning) (region-end) nil)))

  (defun bw/indent-buffer ()
    "缩进 Buffer"
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max)))

  (defun bw/indent-buffer-or-region ()
    "如果有选择 Region，缩进 Region，否则缩进 Buffer。"
    (interactive)
    (save-excursion
      (if (region-active-p)
          (progn
            (delete-trailing-whitespace (region-beginning) (region-end))
            (indent-region (region-beginning) (region-end))
            (untabify (region-beginning) (region-end))
            (message "Indent selected region."))
        (progn
          (bw/indent-buffer)
          (message "Indent bufer.")))))


  (bw/set-space-key-and-name
   "bi" 'bw/indent-buffer-or-region "indent")
#+END_SRC

* indent-guide

  [[https://github.com/zk-phi/indent-guide][indent-guide]] 在缩进的位置显示一条竖线。可以用 indent-guide-mode 在当
前 Buffer 打开（或者加到 Mode Hook），也可以用 indent-guide-global-mode
全局打开。

#+BEGIN_SRC emacs-lisp
  (use-package indent-guide
    :ensure t
    :hook (prog-mode . indent-guide-mode))
#+END_SRC

* expand-region

  [[https://github.com/magnars/expand-region.el][expand-region]] 能够在当前选区的基础上，根据语法、语义扩展选区。

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+END_SRC

* zzz-to-char

  [[https://github.com/mrkkrp/zzz-to-char][zzz-to-char]] 是内置 zap-to-char 功能的增强：当多个同名的 char 共存的
时候，提供类似 Avy 的界面，让用户选择到底删除到哪个 char。

#+BEGIN_SRC emacs-lisp
  (use-package zzz-to-char
    :ensure t
    :bind ("M-z" . zzz-to-char))
#+END_SRC

* clean-aindent-mode

  在自动缩进的编辑模式下，如果连续输入回车，每一行都会留下几个缩进的空
格，[[https://github.com/pmarinov/clean-aindent-mode][clean-aindent-mode]] 可以自动删除这些多余的空格。

#+BEGIN_SRC emacs-lisp
  (use-package clean-aindent-mode
    :ensure t
    :hook (prog-mode))
#+END_SRC

* ws-butler

  [[https://github.com/lewang/ws-butler][ws-butler]] 会自动在保存文件是清除行尾多余空格。因为这个清除只作用于本
次修改的行，所以在处理大文件时性能会比较好。

#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :ensure t
    :hook (prog-mode . ws-butler-mode))
#+END_SRC

* visual-regexp

  [[https://github.com/benma/visual-regexp.el][visual-regexp]]

#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :ensure t
    :defer t)
#+END_SRC

* discover-my-major

  [[https://github.com/steckerhalter/discover-my-major][discover-my-major]] 可以列出当前 Mode 的键绑定列表。
  - M-x discover-my-major :: 列出 Major Mode 的键绑定列表
  - M-x discover-my-mode :: 列出 Minor Mode 的键绑定列表

#+BEGIN_SRC emacs-lisp
  (use-package discover-my-major
    :ensure t
    :defer t)
#+END_SRC

* NeoTree

  [[https://github.com/jaypei/emacs-neotree][NeoTree]] 在 Emacs 的 Frame 中嵌入一个树状的目录、文件浏览器。

  下面是在 Evil Normal State 里的键绑定。

  | j   | 向下                             |
  | k   | 向上                             |
  |-----+----------------------------------|
  | TAB | 查看文件（光标留在 NeoTree）     |
  | RET | 打开文件（光标切换到打开的文件） |
  |-----+----------------------------------|
  | c   | 切换目录                         |
  | r   | 重命名文件或目录                 |
  | p   | 复制文件或目录                   |
  | d   | 删除文件或目录                   |
  | n   | 创建文件或目录                   |
  |-----+----------------------------------|
  | A   | 切换 NeoTree 窗口大小            |
  | H   | 切换隐藏文件的显示               |
  | g   | 刷新列表                         |
  | q   | 退出                             |

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :defer t
    :init
    ;; 定制 NeoTree 在 Evil Normal State 下的键绑定
    (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-quick-look)
    (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "c")   'neotree-change-root)
    (evil-define-key 'normal neotree-mode-map (kbd "r")   'neotree-rename-node)
    (evil-define-key 'normal neotree-mode-map (kbd "p")   'neotree-copy-node)
    (evil-define-key 'normal neotree-mode-map (kbd "d")   'neotree-delete-node)
    (evil-define-key 'normal neotree-mode-map (kbd "n")   'neotree-create-node)
    (evil-define-key 'normal neotree-mode-map (kbd "A")   'neotree-stretch-toggle)
    (evil-define-key 'normal neotree-mode-map (kbd "H")   'neotree-hidden-file-toggle)
    (evil-define-key 'normal neotree-mode-map (kbd "g")   'neotree-refresh)
    (evil-define-key 'normal neotree-mode-map (kbd "q")   'neotree-hide)
    (bw/set-space-key-and-name
     "at" 'neotree-toggle "NeoTree"))
#+END_SRC

* undo-tree

  Emacs 内置的 Undo 机制把 Undo 操作本身也加到 Undo 链，从而只用一个
Undo 命令实现 Undo/Redo 操作，概念独特，但使用起来不太方便。undo-tree
为 Emacs 提供了和其他软件类似的 Undo/Redo 功能，还提供了一个可视化 Undo
Tree。

  在配置文件中加上 (global-undo-tree-mode) 就可以在所有 Buffer 中用
undo-tree 替换 Emacs 内置的 Undo 系统，并且设置了几个键绑定，下面是常
用的键绑定。

  | 键绑定   | 命令                |
  |----------+---------------------|
  | C-_  C-/ | undo-tree-undo      |
  | M-_  C-? | undo-tree-redo      |
  | C-x u    | undo-tree-visualize |

  Evil 依赖 undo-tree 实现 Undo/Redo 的功能，所以使用 Evil 的话，会全
局激活 undo-tree-mode。

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :defer t
    :delight
    :config
    ;; 在可视化 Undo Tree 显示时间戳
    (setq undo-tree-visualizer-timestamps t)
    ;; 在可视化 Undo Tree 显示 Diff
    (setq undo-tree-visualizer-diff t))
#+END_SRC

* Shell

#+BEGIN_SRC emacs-lisp
  (use-package shell
    :ensure nil
    :defer t
    :init
    (when bw/windows-p
      ;; 通过 --login 加载 .bash_profile 以设置 PS1
      (setq explicit-bash-args '("--login" "-i"))))
#+END_SRC

* Misc
** pcache

  某些包依赖于 pcache，这里定制 pcache-directory。

#+BEGIN_SRC emacs-lisp
  (use-package pcache
    :ensure nil
    :defer t
    :init
    (setq pcache-directory
          (let ((dir (concat user-emacs-directory ".var/pcache/")))
            (make-directory dir t)
            dir)))
#+END_SRC
