#+TITLE:     Notes

* Hide Show

  hs-minor-mode 可以根据语法区分文本块，从而隐藏或者显示文本。语法在变
量 hs-special-modes-alist 里定义，该变量在 hs-minor-mode 的实现总缺省
支持 c-mode、c++-mode、bibtex-mode、java-mode 和 js-mode，其他模式可以
在其实现中通过修改 hs-special-modes-alist 以得到 hs-minor-mode 的支持。

  目前支持 hs-minor-mode 的编程语言有：
  - Lisp、Emacs Lisp、Scheme
  - Java、C、C++ 
  - Perl
  - C#
  - PHP
  - Tcl
  - VHDL
  - Fortran
  - Python

#+BEGIN_SRC emacs-lisp
  ;; 在一些编程语言的模式中启用 hs-minor-mode
  (dolist (x '(c c++ emacs-lisp lisp java perl sh python))
    (add-hook (intern (concat (symbol-name x) "-mode-hook")) 'hs-minor-mode))

  ;; 重定义键绑定
  (setq hs-minor-mode-map
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "C-o C-o")   'hs-toggle-hiding)
          (define-key map (kbd "C-o C-a")   'hs-show-all)
          (define-key map (kbd "C-o C-t")   'hs-hide-all)
          (define-key map (kbd "C-o C-s")   'hs-show-block)
          (define-key map (kbd "C-o C-c")   'hs-hide-block)
          (define-key map (kbd "C-o C-l")   'hs-hide-level)
          (define-key map [(shift mouse-2)] 'hs-mouse-toggle-hiding)
          map))

  ;; 在 isearch 中自动展开折叠的文本块。缺省只展开代码部分，这里设置成注
  ;; 释部分也自动展开
  (setq hs-isearch-open t)

  ;; goto-line 目标行处于折叠状态时，自动展开
  (defadvice goto-line (after expand-after-goto-line
                              activate compile)
    (save-excursion
      (hs-show-block)))
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :init
    (add-hook 'org-mode-hook
              (lambda ()
                (auto-fill-mode 1)))
    :config
    ;; SRC 块内支持语法高亮
    (setq org-src-fontify-natively t)
    ;; 键绑定
    (setq org-special-ctrl-a/e t)         ; 微调 C-a/e 的行为
    (evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle)
    (bw/set-space-key-and-name "c" 'org-capture nil)
    ;; Org 目录
    (if (getenv "ORG_DIRECTORY")
        (setq org-directory (getenv "ORG_DIRECTORY"))
      (setq org-directory "~/notes/"))
    ;; Org Capture 模版
    (setq org-capture-templates
          `(("t" "Todo" entry (file+headline "gtd" "Inbox") "* TODO %? %^g\n  %u")
            ("n" "Note" entry (file "notes") "* %?\n  %T" :prepend t)
            ("d" "Diary" entry (file+datetree "journal.org.gpg")
             "* %^{Title} %^g\n%T\n\n  %?" :kill-buffer t)
            ("o" "DailyLog" entry (file+datetree+prompt "journal.org.gpg")
             ,(concat "* Daily Log                                                     :DailyLog:\n"
                      "<%<%Y-%m-%d %a 23:59>>\n"
                      "\n"
                      "  %?\n"
                      "  - 今日计划\n"
                      "    + \n"
                      "  - 今日一览\n"
                      "    + 工作 :: \n"
                      "    + 亲友 :: \n"
                      "    + 健康 :: \n"
                      "    + 学习 :: \n"
                      "    + 心智 :: \n"
                      "  - 今日日志\n"
                      "    + \n"
                      "  - 今日打分 %u [%]\n"
                      "    + [ ] 锻炼英语听力\n"
                      "    + [ ] 学习 10 个新单词、词组\n"
                      "    + [ ] 对工作进展满意\n")
             :kill-buffer t)
            ("w" "WeeklyReview" entry (file+datetree+prompt "journal.org.gpg")
             ,(concat "* Weekly Review %<%Y>-W%<%V>                                    :WeeklyReview:\n"
                      "<%<%Y-%m-%d %a 12:00>>\n"
                      "\n"
                      "  本周亮点\n"
                      "  - %?\n"
                      "  本周一览\n"
                      "  - \n"
                      "  本周遗憾\n"
                      "  - \n"
                      "  下周计划\n"
                      "  - \n")
             :kill-buffer t)
            ("m" "MonthlyReview" entry (file+datetree+prompt "journal.org.gpg")
             ,(concat "* Monthly Review %<%Y>-%<%02m>                                :MonthlyReview:\n"
                      "<%<%Y-%m-%d %a 23:00>>\n"
                      "\n"
                      "  本月亮点\n"
                      "  - %?\n"
                      "  本月要点\n"
                      "  - \n"
                      "  下月计划\n"
                      "  - \n")
             :kill-buffer t))))
#+END_SRC

* Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+END_SRC

* XML

#+BEGIN_SRC emacs-lisp
  (use-package nxml-mode
    :ensure nil
    :mode ("\\.vssettings\\'"))
#+END_SRC
