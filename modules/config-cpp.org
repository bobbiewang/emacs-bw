#+TITLE:     C++ Development Environment

* CC Mode

#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :ensure nil
    :init
    (defun bw/cc-mode-hook()
      (c-set-style "stroustrup")
      (c-set-offset 'inline-open 0)
      ;; 将 _ 作为 Word 的一部分，这样 Evil 的 Word 相关命令能够正常工作
      (modify-syntax-entry ?_ "w"))

    (add-hook 'c-mode-common-hook 'bw/cc-mode-hook))
#+END_SRC

* Semantic

  Semantic 是 CEDET 的一部分，以 Emacs Lisp 实现各语言的解析器，从而提
供代码补全、代码浏览等功能的支持。
  - Company 自带 company-semantic 后端使用 Semantic 数据进行补全
  - Senator 使用 Semantic 数据进行代码浏览，也有代码补全功能

  Semantic 缺省自动解析有限的系统 INCLUDE 目录，具体内置可以查看变量
semantic-dependency-system-include-path。对于其他系统或第三方库的头文
件的路径，需要通过 semanntic-add-system-include 命令添加。

#+BEGIN_SRC emacs-lisp-example
  (semantic-add-system-include "~/kernel") ; 用于 C/C++ Modes
  (semantic-add-system-include "/usr/include/boost" 'c++-mode) ; 用于 C++ Mode
#+END_SRC

#+BEGIN_SRC emacs-lisp-example
  (setq semanticdb-default-save-directory
        (locate-user-emacs-file ".semanticdb"))

  (require 'semantic)

  ;; 将 Semantic 解析后的数据缓存到文件中
  (global-semanticdb-minor-mode 1)

  ;; 在用户不操作是自动更新数据，否则只在执行某些命令时更新
  (global-semantic-idle-scheduler-mode 1)

  ;; 激活 Semantic Mode，解析文件
  (semantic-mode 1)

  ;; 在 buffer 的第一行显示当前光标所在函数的函数名
  (add-to-list 'semantic-default-submodes
               'global-semantic-stickyfunc-mode)
#+END_SRC

* Flycheck - Syntax checking for GNU Emacs

  [[http://www.flycheck.org/][Flycheck]] 是个现代的实时语法检查工具，可以替代 Flymake。

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC

* CMake
** cmake-font-lock

  [[https://github.com/Lindydancer/cmake-font-lock][cmake-font-lock]] 为 CMakeLists.txt 提供了语法高亮。

#+BEGIN_SRC emacs-lisp
  (use-package cmake-font-lock
    :ensure t
    :init
    (add-hook 'cmake-mode-hook 'cmake-font-lock-activate))
#+END_SRC

** cmake-project

  Emacs 的 compile 命令缺省使用 Makefile，而 [[http://github.com/alamaison/emacs-cmake-project][cmake-project]] 让 compile
命令支持 CMake。

  使用 cmake-project 的方法。
  - M-x cmake-project-mode 启用 cmake-project
  - M-x cmake-project-configure-project 生成构建文件
  - M-x compile 进行构建

#+BEGIN_SRC emacs-lisp
  (use-package cmake-project
    :ensure t
    :init
    (defun bw/maybe-cmake-project-hook ()
      (if (file-exists-p "CMakeLists.txt") (cmake-project-mode)))
    (add-hook 'c-mode-common-hook 'bw/maybe-cmake-project-hook)
    :config
    (setq cmake-project-default-build-dir-name "build/"))
#+END_SRC

** cmake-ide

  [[https://github.com/atilaneves/cmake-ide][cmake-ide]] 不是 IDE，而是通过 CMakeLists.txt 或者 [[http://clang.llvm.org/docs/JSONCompilationDatabase.html][JSON Compilation
Database]]，为其他“IDE”扩展提供数据支持。cmake-ide 支持的扩展有：
  - rtags
  - flycheck
  - auto-completion-mode
  - company-clang
  - irony

  cmake-ide 的原理是自动在系统临时目录（或者 cmake-ide-build-pool-dir
设置的目录）下调用 CMake，然后为其他扩展设置必要的信息。

  目前似乎有 Bug，暂时不启用。

#+BEGIN_SRC emacs-lisp
  ;; (use-package cmake-ide
  ;;   :disabled
  ;;   :ensure nil
  ;;   :init
  ;;   (cmake-ide-setup))
#+END_SRC

* irony

  [[https://github.com/Sarcasm/irony-mode][irony]] 以 Server/Client 模式，为 C/C++ 开发的代码补全、语法检查、
eldoc 等功能提供基础支持。Server 是基于 libclang 开发的程序，Client 是
Emacs 扩展。

  irony 扩展自带用 C++ 实现的服务端的代码（irony/server），在第一次使
用的时候要通过 irony-install-server 命令编译安装。下面是相应的命令行，
可以先手工编译、安装好。

#+BEGIN_SRC sh
  cmake -DCMAKE_INSTALL_PREFIX=~/.emacs.d/irony ~/.emacs.d/.elpa/irony/server
  cmake --build . --use-stderr --config Release --target install
#+END_SRC

  irony 需要支持 C/C++ 文件的编译选项才能正常工作，这些信息可以通过
[[http://clang.llvm.org/docs/JSONCompilationDatabase.html][JSON Compilation Database]] 或 [[https://github.com/Rip-Rip/clang_complete/blob/c8673142759b87316265eb0edd1f620196ec1fba/doc/clang_complete.txt#L55][.clang_complete]] 提供。下面是一个用 CMake
生成的 JSON Compilation Database 的例子。

#+BEGIN_SRC javascript
  [
      {
          "directory": "/path/to/cmake/build/directory",
          "command": "/usr/bin/c++.exe -I/path/to/include -o CMakeFiles/example.dir/example.cpp.o -c /path/to/exmaple.cpp",
          "file": "/path/to/example.cpp"
      }
  ]
#+END_SRC

  目前配置不能工作，暂时禁止。

#+BEGIN_SRC emacs-lisp
  (use-package irony
    :disabled
    :ensure t
    :config
    (setq irony-server-install-prefix
          (locate-user-emacs-file ".irony"))
    (setq irony-user-dir
          (locate-user-emacs-file ".irony"))
    ;; Windows performance tweaks
    (when (boundp 'w32-pipe-read-delay)
      (setq w32-pipe-read-delay 0))
    ;; Set the buffer size to 64K on Windows (from the original 4K)
    (when (boundp 'w32-pipe-buffer-size)
      (setq irony-server-w32-pipe-buffer-size (* 64 1024)))
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC

* bison-mode

  bison-mode 为 bison、yacc 和 lex 等文件提供了支持。

#+BEGIN_SRC emacs-lisp
  (use-package bison-mode
    :ensure t)
#+END_SRC

* Debugging

#+BEGIN_SRC emacs-lisp
  (setq
   ;; 缺省激活 gdb-many-windows
   gdb-many-windows t

   ;; 启动的时候显示包含 main 的源文件
   gdb-show-main t)
#+END_SRC

* 参考资料

  - [[https://tuhdo.github.io/c-ide.html][Setup C/C++ Development Environment for Emacs]]
  - [[https://github.com/mawenbao/emacs.d][awenbao/emacs.d]] 以上文为基础配置的 C/C++、Golang 和 Python 的开发
    环境
  - [[https://trivialfis.github.io/emacs/2017/08/02/C-C%2B%2B-Development-Environment-on-Emacs.html][C/C++ Development Environment for Emacs - Trivial Fis]]
  - [[https://vxlabs.com/2016/04/11/step-by-step-guide-to-c-navigation-and-completion-with-emacs-and-the-clang-based-rtags/][C++ navigation and completion with Emacs and the Clang-based rtags]]
  - [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/emacs_cpp_developer_guide-en.org][Practical Emacs Guide for C++ developers]]
  - [[http://nilsdeppe.com/posts/emacs-c%2B%2B-ide][Using Emacs as a C++ IDE]]
  - [[https://oremacs.com/2017/03/28/emacs-cpp-ide/][Using Emacs as a C++ IDE - or emacs]] 用 rtags 跳转，用 irony 补全
  - [[https://maskray.me/blog/2017-12-03-c%2B%2B-language-server-cquery][使用 cquery：C++ language server]]
  - [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]] 推荐的扩展
    - CC Mode
    - rtags :: 基于 Clang 的 Tag
    - ggtags
    - irony-mode :: 基于 Clang 的补全
    - cmake-font-lock
    - function-args
    - Ebrowse
  - Spacemacs 使用的扩展
    - flycheck
    - disaster
    - clang-format :: 基于 Clang 的格式化
    - Semantic
    - cscope
    - company-clang
    - company-ycmd

