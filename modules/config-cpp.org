#+TITLE:     C++ Development Environment

* CC Mode

#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :ensure nil
    :mode ("\\.h\\'" . c++-mode)
    :init
    (defun bw/cc-mode-hook()
      (c-set-style "stroustrup")
      (c-set-offset 'inline-open 0)
      ;; 将 _ 作为 Word 的一部分，这样 Evil 的 Word 相关命令能够正常工作
      (modify-syntax-entry ?_ "w"))

    (add-hook 'c-mode-common-hook 'bw/cc-mode-hook))
#+END_SRC

* Semantic

  Semantic 是 CEDET 的一部分，以 Emacs Lisp 实现各语言的解析器，从而提
供代码补全、代码浏览等功能的支持。
  - Company 自带 company-semantic 后端使用 Semantic 数据进行补全
  - Senator 使用 Semantic 数据进行代码浏览，也有代码补全功能

  Semantic 缺省自动解析有限的系统 INCLUDE 目录，具体内置可以查看变量
semantic-dependency-system-include-path。对于其他系统或第三方库的头文
件的路径，需要通过 semanntic-add-system-include 命令添加。

#+BEGIN_SRC emacs-lisp-example
  (semantic-add-system-include "~/kernel") ; 用于 C/C++ Modes
  (semantic-add-system-include "/usr/include/boost" 'c++-mode) ; 用于 C++ Mode
#+END_SRC

#+BEGIN_SRC emacs-lisp-example
  (setq semanticdb-default-save-directory
        (locate-user-emacs-file ".semanticdb"))

  (require 'semantic)

  ;; 将 Semantic 解析后的数据缓存到文件中
  (global-semanticdb-minor-mode 1)

  ;; 在用户不操作是自动更新数据，否则只在执行某些命令时更新
  (global-semantic-idle-scheduler-mode 1)

  ;; 激活 Semantic Mode，解析文件
  (semantic-mode 1)

  ;; 在 buffer 的第一行显示当前光标所在函数的函数名
  (add-to-list 'semantic-default-submodes
               'global-semantic-stickyfunc-mode)
#+END_SRC

* CMake
** cmake-font-lock

  [[https://github.com/Lindydancer/cmake-font-lock][cmake-font-lock]] 为 CMakeLists.txt 提供了语法高亮。

#+BEGIN_SRC emacs-lisp
  (use-package cmake-font-lock
    :ensure t
    :init
    (add-hook 'cmake-mode-hook 'cmake-font-lock-activate))
#+END_SRC

** cmake-project

  Emacs 的 compile 命令缺省使用 Makefile，而 [[http://github.com/alamaison/emacs-cmake-project][cmake-project]] 让 compile
命令支持 CMake。

  使用 cmake-project 的方法。
  - M-x cmake-project-mode 启用 cmake-project
  - M-x cmake-project-configure-project 生成构建文件
  - M-x compile 进行构建

#+BEGIN_SRC emacs-lisp
  (use-package cmake-project
    :ensure t
    :init
    (defun bw/maybe-cmake-project-hook ()
      (if (file-exists-p "CMakeLists.txt") (cmake-project-mode)))
    (add-hook 'c-mode-common-hook 'bw/maybe-cmake-project-hook)
    :config
    (setq cmake-project-default-build-dir-name "build/"))
#+END_SRC

** cmake-ide

  [[https://github.com/atilaneves/cmake-ide][cmake-ide]] 不是 IDE，而是通过 CMakeLists.txt 或者 [[http://clang.llvm.org/docs/JSONCompilationDatabase.html][JSON Compilation
Database]]，为其他“IDE”扩展提供数据支持。cmake-ide 支持的扩展有：
  - auto-complete-clang
  - company-clang
  - company-c-headers
  - irony
  - semantic
  - flycheck
  - rtags

  分析 cmake-ide--locate-cmakelists 函数，可以看到 cmake-ide 是如何定
位 CMakeLists.txt 文件的。该函数先检查 cmake-ide-project-dir（缺省为
nil）设置的目录下有没有 CMakeLists.txt 文件；找不到的话调用
cmake-ide--locate-cmakelists-impl 函数，从当前目录遍历到根目录，找到最
顶层的 CMakeLists.txt 文件。如果没有找到 CMakeLists.txt，结果为 nil。
定位结果返回给 cmake-ide--locate-project-dir 函数。

  分析 cmake-ide--get-build-dir-from-hash 函数，可以看到 cmake-ide 是
如何确定运行 CMake 的目录的。对于 build-parent-directory，优先选择
cmake-ide-build-pool-dir 的设置，否则的话用系统临时目录。对于具体的目
录，如果设置了 cmake-ide-build-pool-use-persistent-naming，则根据项目
路径生成一个固定而且唯一的目录名，否则调用 make-temp-name 函数生成一个
临时的名字。

  分析 cmake-ide-run-cmake 的源代码，可以看到 cmake-ide 的原理是自动运
行 CMake，生成 [[http://clang.llvm.org/docs/JSONCompilationDatabase.html][JSON Compilation Database]] 文件，从中读取编译参数，然后为
其他扩展设置必要的信息。这个过程可以在 *Message* Buffer 看到一些的消息。

  具体地说，先是 cmake-ide--cdb-json-file-to-idb 从 JSON Compilation
Database 读取信息转为 idb。然后在 cmake-ide--set-flags-for-file 中，调
用 cmake-ide--idb-file-to-obj 根据当前 Buffer 的文件名，从 idb 中查表
得到编译信息，然后调用 cmake-ide-set-compiler-flags 设置信息。

  分析 cmake-ide-set-compiler-flags 的源代码，可以看到 cmake-ide 是如
何为其他扩展设置信息的。
  - auto-complete-clang :: 设置 ac-clang-flags
  - company-clang :: 设置 company-clang-arguments
  - company-c-headers :: 设置 company-c-headers-path-user 和
       company-c-headers-path-system
  - irony :: 调用 irony-cdb-json-add-compile-commands-path 传入项目根
             目录和 JSON Compilation Database 路径，让 Irony 自己读取
             信息
  - semantic :: 通过 semantic-add-system-include 和
                semantic-remove-system-include 设置 Include Path
  - flycheck :: 设置 flycheck-clang-include-path 等

  cmake-ide 设置变量。
  - cmake-ide-cmake-opts :: 调用 CMake 时的参数，缺省是
       -DCMAKE_BUILD_TYPE=Release

  *Windows 平台注意事项*

  Windows 平台有几种 CMake 可以选择：
  1. 官方网站下载的 Windows 包，不需要依赖其他软件
     - 系统有安装 Visual Studio 时，CMake 缺省生成 Visual C++ 的项目
       文件，这时没有 JSON Compilation Database 生成，cmake-ide 不能
       工作
  2. Cygwin 的 CMake
     - 缺省情况下，CMake 使用 cc、c++ 编译器，使用 Unix Makefiles 生成
       器
     - CMake 生成的 JSON Compilation Database 里使用 Cygwin 风格的路径
       （如 /cygdrive/c/path），而 Emacs 使用 Windows 斜杠风格的路径
       （如 c:/path）。路径风格的不一致是许多坑的根源
     - 在传递 CMakeLists.txt 文件所在目录（cmake-ide 称其为项目目录
       project-dir）给 CMake 时，传递的是绝对路径。这时应该使用 Cygwin
       风格的路径，否则 CMake 在处理 CMakeLists.txt 中的
       include_directories 时会报错： Found relative path while
       evaluating include directories of ...。需要进行路径风格的转换
     - 在生成 JSON Compilation Database 后，cmake-ide 会读取这个文件，
       并将信息存在 idb 数据结构中。然后，Emacs 会将当前文件路径
       （Windows 风格）传给 cmake-ide，在 idb 中查表得到该路径（Cygwin
       风格）对应的编译参数。因为两者路径风格不一致，所以查不到信息，
       需要进行路径风格的转换
     - cmake-ide 得到文件的编译参数后，要从中提取 Include Path，并将这
       些信息设置给其他扩展。提取的 Include Path 当然是 Cygwin 风格的
       路径，要转换为 Windows 风格的路径，否则其他扩展不一定支持
       Cygwin 风格的路径
  3. MinGW 的 CMake
     - 缺省情况下，CMake 使用 Visual Studio 15 2017 生成器，出错退出。
       指定 Unix Makefiles 后才使用 MinGW 带的 cc 和 c++ 编译器

#+BEGIN_SRC emacs-lisp
  (use-package cmake-ide
    :ensure t
    :init
    ;; 在 ~/.cmake-ide 目录下运行 CMake，而不是系统临时目录
    (setq cmake-ide-build-pool-dir (locate-user-emacs-file ".cmake-ide/"))
    ;; CMake 构建目录使用固定的名字，从而可以重用
    (setq cmake-ide-build-pool-use-persistent-naming t)
    ;; cmake-ide 的官方文档推荐直接运行 cmake-ide-setup 完成一些 Hook 的
    ;; 设置。这里的设置从当前目录遍历到根目录，检查 CMakeLists.txt 是否
    ;; 存在，存在的话在 C/C++ 文件中启用 cmake-ide
    (defun bw/maybe-cmake-ide-hook ()
      (when (locate-dominating-file (buffer-file-name) "CMakeLists.txt")
        (cmake-ide--mode-hook)))
    (add-hook 'c-mode-common-hook 'bw/maybe-cmake-ide-hook)
    :config
    (defvar bw/cmake-ide-diagnosis nil "输出一些 cmake-ide 内部信息用于诊断")
    (setq cmake-ide-flags-c++ (append '("-std=c++11")))
    (unless (file-directory-p cmake-ide-build-pool-dir)
      (make-directory cmake-ide-build-pool-dir))
    ;; Windows 平台的补丁
    (when bw/windows-p
      ;; cmake-ide 使用固定名字的构建目录时，是根据项目的绝对路径转成目
      ;; 录名的，在 Windows 平台要把冒号 : 替换成下划线 _
      (defadvice cmake-ide--get-project-key (after cleanup-colon act)
        (if (stringp ad-return-value)
            (setq ad-return-value (replace-regexp-in-string ":" "_" ad-return-value))))
      (ad-activate 'cmake-ide--get-project-key)
      ;; 使用 Cygwin 的 CMake 时，将项目路径以绝对路径传给 CMake 时应该
      ;; 使用 Cygwin 风格，否则 CMake 会报错： Found relative path while
      ;; evaluating include directories of ...
      (defadvice cmake-ide--run-cmake-impl (before cygpath-conv (project-dir cmake-dir))
        (ad-set-arg 0 (bw/winpath-to-cygpath project-dir)))
      (ad-activate 'cmake-ide--run-cmake-impl)
      (defadvice cmake-ide--idb-file-to-obj (before cygpath-conv (idb file-name))
        (ad-set-arg 1 (bw/winpath-to-cygpath file-name)))
      (ad-activate 'cmake-ide--idb-file-to-obj)
      ;; cmake-ide--flags-to-include-paths 里调用 expand-file-name 时会
      ;; 将 /cygdrive/c/path 扩展为 c:/cygdrive/c/path
      (defun bw/preprocess-cmake-ide-flags (flags)
        (list (bw/use-winpath-in-list (car flags))))
      (advice-add 'cmake-ide--flags-to-include-paths :filter-args
                  #'bw/preprocess-cmake-ide-flags)))
#+END_SRC

* 补全
** irony

  [[https://github.com/Sarcasm/irony-mode][irony]] 以 Server/Client 模式，为 C/C++ 开发的代码补全、语法检查、
eldoc 等功能提供基础支持。Server 是基于 libclang 开发的程序，Client 是
Emacs 扩展。

  irony 扩展自带用 C++ 实现的服务端程序 irony-server 的代码
（irony/server），在第一次使用的时候要通过 irony-install-server 命令编
译安装。下面是相应的命令行，可以先手工编译、安装好。

#+BEGIN_SRC sh
  cmake -DCMAKE_INSTALL_PREFIX=~/.emacs.d/irony ~/.emacs.d/.elpa/irony/server
  cmake --build . --use-stderr --config Release --target install
#+END_SRC

  irony-server 安装后，可以在命令行下交互使用，下面是一些例子。

#+BEGIN_SRC sh
  # 启动 irony-server 交互界面
  irony-server -i
  # 补全指定文件的指定位置
  complete /path/to/file.cpp 7 8
  # 可以加额外的参数
  complete /path/to/file.cpp 7 8 -- -I/path/to/include
  # 查看补全选项
  candidates "" exact
  # 输出分析信息
  diagnostics
#+END_SRC

  irony 需要支持 C/C++ 文件的编译选项才能正常工作，这些信息可以通过
[[http://clang.llvm.org/docs/JSONCompilationDatabase.html][JSON Compilation Database]] 或 [[https://github.com/Rip-Rip/clang_complete/blob/c8673142759b87316265eb0edd1f620196ec1fba/doc/clang_complete.txt#L55][.clang_complete]] 提供。

  下面是一个用 CMake 生成的 JSON Compilation Database 的例子。

#+BEGIN_SRC javascript
  [
      {
          "directory": "/path/to/cmake/build/directory",
          "command": "/usr/bin/c++.exe -I/path/to/include -o CMakeFiles/example.dir/example.cpp.o -c /path/to/exmaple.cpp",
          "file": "/path/to/example.cpp"
      }
  ]
#+END_SRC

  Irony 推荐在 c++-mode-hook 中调用 irony-mode，然后在 irony-mode-hook
中调用 irony-cdb-autosetup-compile-options 函数自动定位记录编译参数的
文件。这个函数依次尝试 irony-cdb-compilation-databases 中定义的方法，
定位 Compilation Database 文件。
  - irony-cdb-clang-complete :: irony-cdb-clang-complete--locate-db 函
       数调用 locate-dominating-file，从当前目录遍历到根目录，检查是否
       有 .clang_complete 文件
  - irony-cdb-libclang :: irony-cdb-json--locate-db 函数先检查当前文件
       是否 irony-cdb-json--project-alist 列表中的项目中；如果没有话再
       调用 irony-cdb--locate-dominating-file-with-dirs 函数，从当前目
       录遍历到根目录，在每级目录尝试 irony-cdb-search-directory-list
       中定义的相对目录，检查里面有没有 compile_commands.json 文件。因
       为 irony-cdb-search-directory-list 的缺省值是 "." 和 "build"，
       所以是尝试查找每级目录下或者其 build 子目录下有没有
       compile_commands.json 文件
  - irony-cdb-json :: 和 irony-cdb-libclang 一样

  此外，可以 M-x irony-cdb-json-add-compile-commands-path 从指定 JSON
Compilation Database 读取信息。

  如果编译信息被正确读取和设置了，可以在 irony--compile-options 中查看
编译参数，在变量 irony--working-directory 中查看 JSON Compilation
Database 所在目录。也可以 M-x irony-cdb-menu 中查看这些信息。

  如果编译信息没有正确设置，或者补全不能正常工作，可以跟踪以下函数分析
问题。
  - irony--server-send-command :: 其参数列表用来生成向 irony-server 发
       送的字符串
  - irony-iotask-send-string :: 其参数字符串 string 是实际向 irony-server
       发送的字符串
  - irony-iotask-process-filter :: 其参数字符串 output 是 irony-server
       输出的字符串
  - irony-cdb-json-add-compile-commands-path :: cmake-ide 调用这个函数
       设置 Irony 的 Compilation Database 文件的路径

  *Windows 平台注意事项*

  首先，必须确保 irony-server 可以正常工作，而且是在 Emacs 中可以正常
工作。我遇到过在 Cygwin 编译的 irony-server 可以在 CMD 和 Cygwin 中工
作，但在 Emacs M-x shell 中不能工作的情况（找不到补全信息），最后发现
是下文中的 CRLF 问题。所以，必须在 Emacs 内的 shell 中测试
irony-server。

  在 Windows 平台可以用不同的工具链编译 irony-server。
  1. Cygwin
     - Cygwin 编译的程序是以 LF 为换行符的，而 irony-server 从 cin 接
       收到的文本是以 CRLF 为换行符，这样 irony-server 处理命令的时候，
       最后一个参数末尾多了一个 CR，不能正确处理
     - Cygwin 编译的 irony-server 在执行 complete 命令时，文件路径和
       Include 路径都要使用 Cygwin 的风格
  2. MinGW

  要解决 Cygwin 编译的 irony-server 处理 CRLF 的问题，可以在
nextCommand 函数中，对 std::getline 得到的字符串处理一下行末的
CR（ASCII 13）。下面是实例代码。

#+BEGIN_SRC c++
  struct InteractiveCommandProvider : CommandProviderInterface {
    std::vector<std::string> nextCommand() {
      std::string line;

      if (std::getline(std::cin, line)) {
        if (line[line.size()-1] == char(13))
            line = line.substr(0, line.size()-1);
        return unescapeCommandLine(line);
      }

      return std::vector<std::string>(1, "exit");
    }
  };
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package irony
    :ensure t
    :init
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
    (setq irony-server-install-prefix
          (locate-user-emacs-file ".irony"))
    (setq irony-user-dir
          (locate-user-emacs-file ".irony/"))
    :config
    (defvar bw/irony-diagnosis nil "输出一些 Irony 内部信息用于诊断")
    ;; Windows 平台补丁
    (when bw/windows-p
      (defun bw/preprocess-irony-server-send-command (args)
        (if bw/irony-diagnosis
            (if bw/irony-diagnosis
                (bw/log-to-message-buffer "irony--server-send-command" args)))
        ;; 删掉 complete 命令最后一个参数（当前文件，在第一个参数也出现），
        ;; 否则 libclang 提示解析错误，不清楚是什么原因
        (if (string= "complete" (car args))
            (nbutlast args 1))
        (bw/use-cygpath-in-list args))
      (advice-add 'irony--server-send-command :filter-args
                  #'bw/preprocess-irony-server-send-command))
    ;; 输出一些日志信息，便于分析
    (when bw/irony-diagnosis
      (defadvice irony-iotask-send-string (before log-me (string))
        (bw/log-to-message-buffer "irony-iotask-send-string" string))
      (ad-activate 'irony-iotask-send-string)
      (defadvice irony-cdb-json-add-compile-commands-path (before log-me
                                                                  (project-root
                                                                   compile-commands-path))
        (bw/log-to-message-buffer "irony-cdb-json-add-compile-commands-path"
                                  project-root
                                  compile-commands-path))
      (ad-activate 'irony-cdb-json-add-compile-commands-path)
      (defun bw/log-irony-iotask-process-filter (process output)
        (bw/log-to-message-buffer "irony-iotask-process-filter" output))
      (advice-add 'irony-iotask-process-filter :before #'bw/log-irony-iotask-process-filter))
    ;; Windows performance tweaks
    (when (boundp 'w32-pipe-read-delay)
      (setq w32-pipe-read-delay 0))
    ;; Set the buffer size to 64K on Windows (from the original 4K)
    (when (boundp 'w32-pipe-buffer-size)
      (setq irony-server-w32-pipe-buffer-size (* 64 1024))))
#+END_SRC

** company-irony

  [[https://github.com/Sarcasm/company-irony/][company-irony]] 基于 irony 提供补全功能。

#+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :ensure t
    :after (company irony)
    :init
    (add-to-list 'company-backends 'company-irony))
#+END_SRC

* Debugging

#+BEGIN_SRC emacs-lisp
  (setq
   ;; 缺省激活 gdb-many-windows
   gdb-many-windows t

   ;; 启动的时候显示包含 main 的源文件
   gdb-show-main t)
#+END_SRC

* 参考资料

  - [[https://tuhdo.github.io/c-ide.html][Setup C/C++ Development Environment for Emacs - tuhdo]] 经典的文章，
    使用 ggtags、helm、company、CEDET、projectile、hs-minor-mode 等
  - [[https://github.com/mawenbao/emacs.d][awenbao/emacs.d]] 以上文为基础配置的 C/C++、Golang 和 Python 的开发
    环境
  - [[http://syamajala.github.io/c-ide.html][Emacs as C++ IDE - syamajala]] 基于 tuhdo 的文章做了一些改进，主要是
    rtags、irony、cmake-ide
  - [[https://trivialfis.github.io/emacs/2017/08/02/C-C%2B%2B-Development-Environment-on-Emacs.html][C/C++ Development Environment for Emacs - Trivial Fis]] 使用
    cmake-ide、irony、rtags、semantic、ECB、disaster、projectile 等
  - [[https://vxlabs.com/2016/04/11/step-by-step-guide-to-c-navigation-and-completion-with-emacs-and-the-clang-based-rtags/][C++ navigation and completion with Emacs and the Clang-based rtags]]
    使用 rtags
  - [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/emacs_cpp_developer_guide-en.org][Practical Emacs Guide for C++ developers]]
  - [[http://nilsdeppe.com/posts/emacs-c%2B%2B-ide][Using Emacs as a C++ IDE - Nils]] 使用 flycheck、cmake-ide、rtags、
    Helm、Irony、Semantic、flyspell 配置 C++ IDE，在一年多后的 [[http://nilsdeppe.com/posts/emacs-c%2B%2B-ide2][Take 2]]
    中因为性能问题改为 Ivy/Swiper、counsel-etags、ClangFormat、
    ycmd/emacs-ycmd 等
  - [[https://oremacs.com/2017/03/28/emacs-cpp-ide/][Using Emacs as a C++ IDE - or emacs]] 用 rtags 跳转，用 irony 补全
  - [[http://martinsosic.com/development/emacs/2017/12/09/emacs-cpp-ide.html][Emacs as a C++ IDE - Martin Sosic]] 使用 Company、Flycheck、Irony、
    RTags、Projectile 和 Helm；用 Bear 生成 Compilation Database，
    用.clang_complete 让 Irony 支持头文件；因为 Rtags 比 Irony 慢，所
    以小项目用 Rtags，大项目用 Irony
  - [[https://maskray.me/blog/2017-12-03-c%2B%2B-language-server-cquery][使用 cquery：C++ language server]]
  - [[https://github.com/redguardtoo/cpputils-cmake][redguardtoo/cpputils-cmake: Easy real time C++ syntax check and
    intellisense if you use CMake]] 基于 CMake 的 C/C++ 开发环境的配置
  - [[https://emacs.stackexchange.com/questions/474/using-emacs-as-a-full-featured-c-c-ide/][Using Emacs as a full-featured C/C++ IDE - Emacs Stack Exchange]] 一
    些讨论，可以参考一下
  - [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]] 推荐的扩展
    - CC Mode
    - rtags
    - ggtags
    - irony-mode
    - cmake-font-lock
    - function-args
    - Ebrowse
  - Spacemacs 使用的扩展
    - flycheck
    - disaster
    - clang-format
    - Semantic
    - cscope
    - company-clang
    - company-ycmd

