#+TITLE:     Python 开发环境

* 说明

  Python 开发环境依赖一些外部工具。
  - pyright: LSP 后端
  - ruff: 格式化代码
  - direnv: 自动加载 venv

* Python Mode

#+BEGIN_SRC emacs-lisp
  (use-package python
    :ensure nil
    :defer t
    :bind (:map python-mode-map
                ("C-c C-z" . bw/run-or-switch-to-python-shell))
    :config
    (if (executable-find "ipython")
        (setq python-shell-interpreter "ipython"))
    (defun bw/run-or-switch-to-python-shell ()
      "切换到 Python Shell，必要时启动一个 Python Shell"
      (interactive)
      (let ((process (python-shell-get-process)))
        (pop-to-buffer (process-buffer (if process
                                           process
                                         (run-python)))))))
#+END_SRC

* anaconda-mode

  anaconda-mode 支持代码浏览、文档查找和代码补全等功能。安装和设置很简单：通过
ELPA 安装 anaconda-mode，然后在 python-mode 中激活 anaconda-mode 和
anaconda-eldoc-mode 就可以了。

  下面是启用了 anaconda-mode 后可用的命令、缺省键绑定。

  | 命令                           | 描述     | 缺省键绑定 |
  |--------------------------------+----------+------------|
  | anaconda-mode-complete         | 补全     | C-M-i      |
  | anaconda-mode-find-definitions | 查找定义 | M-.        |
  | anaconda-mode-find-assignments | 查找赋值 | M-,        |
  | anaconda-mode-find-references  | 查找引用 | M-r        |
  | anaconda-mode-go-back          | 返回     | M-*        |
  | anaconda-mode-show-doc         | 显示文档 | M-?        |

  anaconda-mode 的功能是通过一些 Python 包完成的，在运行 anaconda-mode 的命令时
会自动通过 pip 安装这些包（如 anaconda-mode、jedi、parso 等）到变量
anaconda-mode-installation-directory 设置的目录下。如果安装这些包没有正确安装，
则 anaconda-mode 不能正常工作，这时可以在 *anaconda-mode* Buffer 中查看错误信息。

  值得注意的是，pip 在 Windows 平台会自动读取 IE 设置的代理，在 Linux 平台读取
https_proxy 环境变量设置的代理，要确保代理是可用的。

#+BEGIN_SRC emacs-lisp
  (use-package anaconda-mode
    :ensure t
    :hook ((python-mode . anaconda-mode)
           (python-mode . anaconda-eldoc-mode))
    :init
    ;; 设置 Python 包的安装目录
    (setq anaconda-mode-installation-directory
          (expand-file-name "emacs/anaconda-mode" (xdg-cache-home))))
#+END_SRC

* company-anaconda

  [[https://github.com/proofit404/company-anaconda][company-anaconda]] 为 Company 提供了基于 anaconda-mode 的补全后端。

#+BEGIN_SRC emacs-lisp
  (use-package company-anaconda
    :ensure t
    :after (company)
    :commands (company-anaconda)
    :config
    (add-to-list 'company-backends '(company-anaconda :with company-capf)))
#+END_SRC

* 参考资料

  - [[https://www.emacswiki.org/emacs/PythonProgrammingInEmacs][EmacsWiki: Python Programming In Emacs]]
  - [[https://realpython.com/blog/python/emacs-the-best-python-editor/][Emacs - the Best Python Editor? - Real Python]]
  - [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]] 推荐的扩展
    - Jedi - A Python auto-completion package.
    - Elpy - An Emacs Python development environment.
    - anaconda-mode - Code navigation, documentation lookup and
      completion for Python.
    - virtualenvwrapper.el - Manage virtualenv from inside Emacs.
  - Spacemacs 使用的扩展
    - anaconda-mode - auto-complete, code navigation, documentation
      lookup
    - pylookup - documentation lookup
    - nose.el, pytest - test runner
    - pyvenv, pyenv - virtual environment
    - YAPF - PEP8 compliant formatting
    - autoflake - suppression of unused import
    - evil-matchit - use the % key to jump between blocks
