#+TITLE:     Completion

* 配置变量

#+BEGIN_SRC emacs-lisp
  ;; -*- lexical-binding: t -*-

  (defvar bw/completion-framework 'vertico
    "补全前端，可选 'ido、'helm、'ivy、'vertico 和 nil")
#+END_SRC

* ido

  ido 是 Emacs 内置的 Completion 扩展，缺省只支持 Buffer 和 File。

  ido 横向显示待选项，ido-vertical-mode 可以将其设置为纵向显示。

#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :if (eq bw/completion-framework 'ido)
    :ensure t
    :init
    ;; 自定义 ido 记录文件的路径
    (setq ido-save-directory-list-file
          (locate-user-emacs-file "var/ido.last"))
    (ido-mode 1)
    ;; 可以用 cu 匹配文件名 config-ui.org
    (setq ido-enable-flex-matching t)
    ;; 在任何可以读取文件、目录的地方使用 ido
    (ido-everywhere 1)
    (ido-vertical-mode 1))
#+END_SRC

* Helm
** Helm

  [[https://github.com/emacs-helm/helm][Helm]] 是一个增量补全和过滤选择项的框架，输入框支持正则表达式和以空格
分隔的多重条件。

  M-x helm-mode 全局激活 Helm 补全，在 Emacs 中所有使用
completing-read（如 describe-function）或 read-file-name 的地方都会自
动使用 Helm 接口。

  在运行 Helm 时，用户能进行一些额外的操作，下面是几个常见的。可以执行
C-h m 查看 Helm 自带的帮助。
  - helm-select-action (Tab) :: 显示动作菜单
  - helm-execute-persistent-action (C-z) :: 选择当前项，不退出 minibuffer
  - helm-maybe-exit-minibuffer (RET)  :: 选择当前项，退出 minibuffer

  在 helm-mini、helm-find-files 中可以按 C-s 进入搜索模式。

  参考资料
  - [[https://tuhdo.github.io/helm-intro.html][A Package in a league of its own]]

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :if (eq bw/completion-framework 'helm)
    :ensure t
    :bind (("M-x"   . helm-M-x)
           ("M-y"   . helm-show-kill-ring)
           ("C-x b" . helm-mini))
    :config
    ;; 交换 TAB 和 C-Z
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
    (define-key helm-map (kbd "C-z")  'helm-select-action)
    ;; Space 键绑定
    (bw/define-keys-and-names
     "bm"  'helm-imenu      "imenu"
     "ff"  'helm-find-files nil
     "fF"  'helm-mini       nil
     "ha"  'helm-apropos    "apropos"
     "sf"  'helm-find       "find")
    ;; 设置 helm-mini 包括的内容
    (setq bw/helm-source-file-cache
          '((name . "File cache")
            (candidates . bw/file-cache-list)
            (action . (lambda (candidate)
                        (find-file candidate)))))
    (setq helm-mini-default-sources '(helm-source-buffers-list
                                      helm-source-recentf
                                      bw/helm-source-file-cache
                                      helm-source-buffer-not-found))
    (helm-mode 1))
#+END_SRC

** helm-descbinds

  [[https://github.com/emacs-helm/helm-descbinds][helm-descbinds]] 为 Emacs 的 describe-bindings 提供了 Helm 接口。

#+BEGIN_SRC emacs-lisp
  (use-package helm-descbinds
    :if (eq bw/completion-framework 'helm)
    :ensure t
    :init
    (helm-descbinds-mode))
#+END_SRC

* Ivy
** Ivy

  [[https://github.com/abo-abo/swiper][Ivy]] 是一个增量补全和过滤选择项的框架，比 Helm 轻量级，其实现分为三个
包：ivy、swiper、counsel。安装 counsel 会自动安装前两个依赖的包。

  M-x ivy-mode 全局激活 Ivy 补全，在 Emacs 中所有使用
completing-read-function 的地方会自动调用 Ivy 接口。

  counsel-rg 在 minibuffer 中实时显示搜索结果，可以 C-c C-o 将结果输出到 Buffer。

  参考资料
  - [[https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html][Ivy, Counsel and Swiper]]

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :if (eq bw/completion-framework 'ivy)
    :ensure t
    :bind (("M-x"     . counsel-M-x)
           ("C-x b"   . ivy-switch-buffer)
           ("C-x C-f" . counsel-find-file)
           ("M-g i"   . counsel-imenu)
           ("M-y"     . counsel-yank-pop))
    :init
    ;; 全局激活 ivy-mode，使用 completing-read 的地方都使用 Ivy 接口
    (ivy-mode 1)
    ;; 把最近打开的文件和书签加到 ivy-switch-buffer 中
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; 可以选择当前输入为结果，比如在 find-file 中新建文件
    (setq ivy-use-selectable-prompt t)
    ;; 在 Ivy 补全界面中同时显示当前项序号和项目总数
    (setq ivy-count-format "%d/%d> ")
    ;; 传统键绑定
    (define-key (current-global-map) [remap describe-function]
      'counsel-describe-function)
    (define-key (current-global-map) [remap describe-variable]
      'counsel-describe-variable)
    ;; Space 键绑定
    (bw/define-keys-and-names
     "/"  'counsel-grep-or-swiper    "/"
     "bm" 'counsel-imenu             "imenu"
     "ff" 'counsel-find-file         "file file"
     "fF" 'ivy-switch-buffer         "switch buffer"
     "ha" 'counsel-apropos           "apropos"
     "hb" 'counsel-descbinds         "binding"
     "hf" 'counsel-describe-function "function"
     "hF" 'counsel-describe-face     "face"
     "hv" 'counsel-describe-variable "variable"
     "sa" 'counsel-ag                "ag"
     "sr" 'counsel-rg                "rg"))
#+END_SRC

** ivy-hydra

  [[https://github.com/abo-abo/swiper][ivy-hydra]] 为 Ivy 提供了 hydra-ivy/body 命令，在 Ivy 界面按 C-o，可以
调出 [[https://github.com/abo-abo/hydra][Hydra]] 的功能介绍界面。

#+BEGIN_SRC emacs-lisp
  (use-package ivy-hydra
    :if (eq bw/completion-framework 'ivy)
    :ensure t
    :defer t)
#+END_SRC

** smex

  Ivy 的 counsel-M-x 缺省命令列表的排序是固定的，安装了 smex 后会使用
smex 的数据，最近用的命令列在前面。

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :if (eq bw/completion-framework 'ivy)
    :ensure t
    :defer t
    :init
    (setq smex-save-file (locate-user-emacs-file "var/smex-items")))
#+END_SRC

* Vertico

  [[https://github.com/minad/vertico][Vertico]] 基于 Emacs 内置的 Completion 系统，提供一个高性能且简约的接口。

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :if (eq bw/completion-framework 'vertico)
    :custom
    (vertico-cycle t) ;; 允许循环选择
    :init
    (vertico-mode))

  (use-package vertico-directory
    :after vertico
    :ensure nil
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+END_SRC

  [[https://github.com/minad/consult][Consult]] 提供了一些基于 Emacs 补全函数 completing-read 的命令。这里配合 vertico
使用。

  Consult 的一些搜索命令是支持额外的命令行参数的，只要用 -- 分隔就星了。比如
consult-ripgrep，可以 M-x consult-ripgrep RET main -- -tcpp。这里的 -tcpp 限定只
搜索 C++ 文件。

#+BEGIN_SRC emacs-lisp
  (use-package consult
    :if (eq bw/completion-framework 'vertico)
    :ensure t
    :bind (("C-x b" . consult-buffer)
           ("M-g i" . consult-imenu)
           ("M-y"   . consult-yank-pop))
    :init
    (bw/define-keys-and-names
     "/"  'consult-line    "/"
     "fF" 'consult-fd      "file file dwim"
     "bb" 'consult-buffer  "switch buffer"
     "bm" 'consult-imenu   "imenu"
     "sg" 'consult-grep    "grep"
     "sr" 'rg-menu         "ripgrep"
     "sp" 'consult-ripgrep "ripgrep in project"))
#+END_SRC

  [[https://github.com/oantolin/orderless][orderless]] 支持无序的 Completion 支持。这里配合 vertico 使用。

#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :if (eq bw/completion-framework 'vertico)
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

* YASnippet

  [[https://github.com/joaotavora/yasnippet][YASnippet]] 是一个留下的 Emacs 模版系统。

  安装 YASnippet 后，有两种方式激活。
  - M-x yas-global-mode 全局激活
  - 通过 yas-reload-all 加载 Snippets，在 hook 中通过 yas-minor-mode
    激活

  YASnippet 的 Snippet 目录通过 yas-snippet-dirs 设置，其子目录以
Major Mode 的名字组织。

  在使用 YASnippet 的过程中，如果需要新加一个 Snippet，可以运行
yas-new-snippet 创建新的 Snippet；如果需要修改现成的 Snippet，可以 M-x
yas-visit-snippet-file 打开相应的 Snippet 文件修改。

  参考资料：
  - [[http://joaotavora.github.io/yasnippet/][Yet another snippet extension]] 官方文档

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :defer t
    :init
    (setq yas-snippet-dirs
          (list (locate-user-emacs-file "etc/snippets")))
    :config
    (yas-reload-all))
#+END_SRC

* Company

  [[http://company-mode.github.io/][Company]] 是一个自动补全框架。

  | M-x company-mode     | 激活 Company 模式      |
  | M-x company-complete | 补全命令，可以手动激发 |
  | M-n、M-p             | 在候选内容中选择       |
  | C-s、C-r、C-o        | 在候选内容中搜索       |

  Company 自带多个补全后端（Backend），每个补全后端都是一个函数，可以
从这个函数开始阅读，了解该后端实现的原理。另外，还有许多第三方的补全后
端，可以参考 [[https://github.com/company-mode/company-mode/wiki/Third-Party-Packages][Third Party Packages]]。

  变量 company-backends 列表中记录了可供使用的 Backend。在补全时，
Company 依次尝试每个 Backend，并使用第一个能匹配的 Backend 返回的补全
项。如果要使用使用多个 Backend，可以将其分为一组（放在一个列表中），这
样它们的补选项会被合并显示。比如， ((a b) c d e) 中的 a、b 可以同时使
用 。下面的示例代码将 company-yasnippet 加到 company-backends 的每个
Backend 组中。

#+BEGIN_SRC emacs-lisp-example
  (defun add-yasnippet-to-company-backend (backend)
    (if (and (listp backend) (member 'company-yasnippet backend))
        backend
      (append (if (consp backend)
                  backend
                (list backend))
              '(:with company-yasnippet))))

  (setq company-backends
        (mapcar #'add-yasnippet-to-company-backend company-backends))
#+END_SRC

  company-clang 利用 Clang 分析 C/C++ 源文件，从而实现准确的补全。如果
使用 company-clang 的话，需要通过 .dir-locals 文件让Clang 知道编译参数，
尤其是 include 目录的路径，下面是一个例子。注意，每个参数一个字符串，
不要把多个参数合并在一个字符串，否则 Clang 不能正确处理。

#+BEGIN_SRC emacs-lisp-example
  ((nil . ((company-clang-arguments . ("-I/path/to/include1/"
                                       "-I/path/to/include2/"
                                       "-DDEBUG")))))
#+END_SRC

  company-cmake 的设计比较有趣，在 company-cmake--candidates 函数中调
用 cmake 的 --help-command-list、--help-module-list、--help-variable-list
命令行，得到补全信息。

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :delight
    ;; 全局激活 Company Mode
    :hook (after-init . global-company-mode)
    :config
    ;; 激发补全前等待时间，缺省是 0.5，修改成 0.1 会快一点
    (setq company-idle-delay 0.1))
#+END_SRC

* Marginalia

  [[https://github.com/minad/marginalia][Marginalia]] 为 minibuffer 的 Completion 候选项提供 Annotation。其支持的
Annotation 有 File、Buffer、Function、Variable、Library 等。可以通过变量
marginalia-annotator-registry 查看详细列表。

#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :bind (:map minibuffer-local-map
                ;; 切换显示内容
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+END_SRC
